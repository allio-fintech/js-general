webpackHotUpdate_N_E("pages/market-graph",{

/***/ "./src/features/marketGraph/MarketGraph.tsx":
/*!**************************************************!*\
  !*** ./src/features/marketGraph/MarketGraph.tsx ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ \"./node_modules/@babel/runtime/regenerator/index.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/asyncToGenerator */ \"./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var _emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @emotion/react/jsx-dev-runtime */ \"./node_modules/@emotion/react/jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js\");\n/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @reduxjs/toolkit */ \"./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js\");\n/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react-redux */ \"./node_modules/react-redux/es/index.js\");\n/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dynamic */ \"./node_modules/next/dynamic.js\");\n/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dynamic__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var react_color__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react-color */ \"./node_modules/react-color/es/index.js\");\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @emotion/react */ \"./node_modules/@emotion/react/dist/emotion-react.browser.esm.js\");\n/* harmony import */ var utils_styles_rem__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! utils/styles/rem */ \"./src/utils/styles/rem.ts\");\n/* harmony import */ var utils_styles_transition__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! utils/styles/transition */ \"./src/utils/styles/transition.ts\");\n/* harmony import */ var _assetDataEntityAdapter__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./assetDataEntityAdapter */ \"./src/features/marketGraph/assetDataEntityAdapter.ts\");\n/* harmony import */ var _fetchMarketDataByTickerThunk__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./fetchMarketDataByTickerThunk */ \"./src/features/marketGraph/fetchMarketDataByTickerThunk.ts\");\n/* harmony import */ var _generateCsvUrlThrunk__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./generateCsvUrlThrunk */ \"./src/features/marketGraph/generateCsvUrlThrunk.ts\");\n/* harmony import */ var _marketGraphSelectors__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./marketGraphSelectors */ \"./src/features/marketGraph/marketGraphSelectors.tsx\");\n/* harmony import */ var _marketGraphSlice__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./marketGraphSlice */ \"./src/features/marketGraph/marketGraphSlice.ts\");\n/* harmony import */ var _rawYahooFinanceChartDataEntityAdapter__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./rawYahooFinanceChartDataEntityAdapter */ \"./src/features/marketGraph/rawYahooFinanceChartDataEntityAdapter.ts\");\n/* harmony import */ var _datePriceDataEntityAdapter__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./datePriceDataEntityAdapter */ \"./src/features/marketGraph/datePriceDataEntityAdapter.ts\");\n\n\n\n\n\n\nvar _jsxFileName = \"/home/clfhhc/src/allio/js-general/frontend/src/features/marketGraph/MarketGraph.tsx\",\n    _this = undefined,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar buttonStyles = /*#__PURE__*/Object(_emotion_react__WEBPACK_IMPORTED_MODULE_8__[\"css\"])(\"padding:\", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(4), \" \", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(8), \";border-radius:\", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(10), \";cursor:pointer;border:\", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(2), \" solid #4caf50;\", Object(utils_styles_transition__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(100)('all'), \";font-size:\", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(16), \";margin:\", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(10), \" \", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(20), \";outline:None;&:hover{background-color:#4caf50;color:white;box-shadow:0 \", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(12), \" \", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(16), \" 0 rgba(0, 0, 0, 0.24),0 \", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(17), \" \", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(50), \" 0 rgba(0, 0, 0, 0.19);}&:active{background-color:white;color:black;box-shadow:0 \", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(3), \" \", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(4), \" 0 rgba(0, 0, 0, 0.24),0 \", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(4), \" \", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(13), \" 0 rgba(0, 0, 0, 0.19);}\" + (false ? undefined : \";label:buttonStyles;\"), false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\nvar downloadLinkStyles = /*#__PURE__*/Object(_emotion_react__WEBPACK_IMPORTED_MODULE_8__[\"css\"])(\"display:block;max-width:\", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(150), \";border:\", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(2), \" dotted black;padding:\", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(4), \" \", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(8), \";font-size:\", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(16), \";margin:\", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(10), \" auto;text-align:center;&:link{color:black;}&:active,&:hover{color:blue;}\" + (false ? undefined : \";label:downloadLinkStyles;\"), false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n\nvar buttonBackgroundColor = function buttonBackgroundColor(_ref) {\n  var color = _ref.color,\n      disabled = _ref.disabled;\n  return /*#__PURE__*/Object(_emotion_react__WEBPACK_IMPORTED_MODULE_8__[\"css\"])(\"border-color:\", color, \";border-radius:\", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(1), \";padding:\", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(2), \";margin:0;&:hover{background-color:\", disabled ? 'initial' : color, \";\", disabled ? 'color: lightgray' : '', \";box-shadow:initial;}&:active{background-color:white;}\" + (false ? undefined : \";label:buttonBackgroundColor;\"), false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n};\n\nvar graphOptionBlockStyles = false ? undefined : {\n  name: \"zpafut-graphOptionBlockStyles\",\n  styles: \"display:flex;flex-flow:row nowrap;overflow-x:auto;label:graphOptionBlockStyles;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar graphOptionDivStyles = /*#__PURE__*/Object(_emotion_react__WEBPACK_IMPORTED_MODULE_8__[\"css\"])(\"display:flex;flex-flow:column nowrap;max-width:\", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(60), \";align-items:center;margin:0 \", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(10), \";&.*{display:block;}\" + (false ? undefined : \";label:graphOptionDivStyles;\"), false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2NsZmhoYy9zcmMvYWxsaW8vanMtZ2VuZXJhbC9mcm9udGVuZC9zcmMvZmVhdHVyZXMvbWFya2V0R3JhcGgvTWFya2V0R3JhcGgudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlIZ0MiLCJmaWxlIjoiL2hvbWUvY2xmaGhjL3NyYy9hbGxpby9qcy1nZW5lcmFsL2Zyb250ZW5kL3NyYy9mZWF0dXJlcy9tYXJrZXRHcmFwaC9NYXJrZXRHcmFwaC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1bndyYXBSZXN1bHQgfSBmcm9tICdAcmVkdXhqcy90b29sa2l0JztcbmltcG9ydCB7IEFwcERpc3BhdGNoIH0gZnJvbSAnZmVhdHVyZXMvcmVkdXgvc3RvcmUnO1xuaW1wb3J0IHsgRkMsIEZvcm1FdmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZURpc3BhdGNoLCB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCBkeW5hbWljIGZyb20gJ25leHQvZHluYW1pYyc7XG5pbXBvcnQgeyBTa2V0Y2hQaWNrZXIgfSBmcm9tICdyZWFjdC1jb2xvcic7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgcmVtIGZyb20gJ3V0aWxzL3N0eWxlcy9yZW0nO1xuaW1wb3J0IHRyYW5zaXRpb24gZnJvbSAndXRpbHMvc3R5bGVzL3RyYW5zaXRpb24nO1xuaW1wb3J0IGFzc2V0RGF0YUVudGl0eUFkYXB0ZXIgZnJvbSAnLi9hc3NldERhdGFFbnRpdHlBZGFwdGVyJztcbmltcG9ydCBmZXRjaE1hcmtldERhdGFCeVRpY2tlclRodW5rIGZyb20gJy4vZmV0Y2hNYXJrZXREYXRhQnlUaWNrZXJUaHVuayc7XG5pbXBvcnQgZ2VuZXJhdGVDc3ZVcmxUaHJ1bmsgZnJvbSAnLi9nZW5lcmF0ZUNzdlVybFRocnVuayc7XG5pbXBvcnQge1xuICBnbG9iYWxTZWxlY3RZYWhvb0ZpbmFuY2VEYXRhTG9hZGluZyxcbiAgZ2xvYmFsU2VsZWN0WWFob29GaW5hbmNlRGF0YUVycm9yTWVzc2FnZSxcbiAgZ2xvYmFsU2VsZWN0TWFya2V0R3JhcGhUaWNrZXIsXG4gIGdsb2JhbFNlbGVjdE1hcmtldEdyYXBoSW5pdGlhbERhdGUsXG4gIGdsb2JhbFNlbGVjdE1hcmtldEdyYXBoSW5pdGlhbEZ1bmQsXG4gIGdsb2JhbFNlbGVjdFJhd1lhaG9vRmluYW5jZURhdGEsXG4gIGdsb2JhbFNlbGVjdE1hcmtldEdyYXBoRGlzcGxheU9wdGlvbnMsXG4gIGdsb2JhbFNlbGVjdE1hcmtldEdyYXBoRmluYWxEYXRlLFxuICBnbG9iYWxTZWxlY3RBbGxpb0FsbG9jYXRpb24sXG4gIGdsb2JhbFNlbGVjdE1hcmtldEdyYXBoQ3N2VXJsLFxuICBnbG9iYWxTZWxlY3RNYXJrZXRHcmFwaERhdGEsXG59IGZyb20gJy4vbWFya2V0R3JhcGhTZWxlY3RvcnMnO1xuaW1wb3J0IHtcbiAgYWRkR3JhcGhEaXNwbGF5T3B0aW9uLFxuICBjaGFuZ2VJbml0aWFsRGF0ZSxcbiAgY2hhbmdlRmluYWxEYXRlLFxuICBjaGFuZ2VJbml0aWFsRnVuZCxcbiAgY2hhbmdlVGlja2VyLFxuICBwYXJzZU1hcmtldENsb3NlRGF0YSxcbiAgdXBkYXRlR3JhcGhEaXNwbGF5T3B0aW9uLFxuICB1cGRhdGVBbGxpb0FsbG9jYXRpb25Qcm9wb3J0aW9uLFxuICBhZGRBbGxpb0FsbG9jYXRpb25Bc3NldCxcbiAgZ2VuZXJhdGVNYXJrZXRHcmFwaERhdGEsXG4gIHRvZ2dsZUVkaXRDb2xvcixcbn0gZnJvbSAnLi9tYXJrZXRHcmFwaFNsaWNlJztcbmltcG9ydCByYXdZYWhvb0ZpbmFuY2VDaGFydERhdGFFbnRpdHlBZGFwdGVyIGZyb20gJy4vcmF3WWFob29GaW5hbmNlQ2hhcnREYXRhRW50aXR5QWRhcHRlcic7XG5pbXBvcnQgZGF0ZVByaWNlRGF0YUVudGl0eUFkYXB0ZXIgZnJvbSAnLi9kYXRlUHJpY2VEYXRhRW50aXR5QWRhcHRlcic7XG5cbmNvbnN0IGJ1dHRvblN0eWxlcyA9IGNzc2BcbiAgcGFkZGluZzogJHtyZW0oNCl9ICR7cmVtKDgpfTtcbiAgYm9yZGVyLXJhZGl1czogJHtyZW0oMTApfTtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBib3JkZXI6ICR7cmVtKDIpfSBzb2xpZCAjNGNhZjUwO1xuICAke3RyYW5zaXRpb24oMTAwKSgnYWxsJyl9O1xuICBmb250LXNpemU6ICR7cmVtKDE2KX07XG4gIG1hcmdpbjogJHtyZW0oMTApfSAke3JlbSgyMCl9O1xuICBvdXRsaW5lOiBOb25lO1xuXG4gICY6aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICM0Y2FmNTA7XG4gICAgY29sb3I6IHdoaXRlO1xuICAgIGJveC1zaGFkb3c6IDAgJHtyZW0oMTIpfSAke3JlbSgxNil9IDAgcmdiYSgwLCAwLCAwLCAwLjI0KSxcbiAgICAgIDAgJHtyZW0oMTcpfSAke3JlbSg1MCl9IDAgcmdiYSgwLCAwLCAwLCAwLjE5KTtcbiAgfVxuXG4gICY6YWN0aXZlIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgICBjb2xvcjogYmxhY2s7XG4gICAgYm94LXNoYWRvdzogMCAke3JlbSgzKX0gJHtyZW0oNCl9IDAgcmdiYSgwLCAwLCAwLCAwLjI0KSxcbiAgICAgIDAgJHtyZW0oNCl9ICR7cmVtKDEzKX0gMCByZ2JhKDAsIDAsIDAsIDAuMTkpO1xuICB9XG5gO1xuXG5jb25zdCBkb3dubG9hZExpbmtTdHlsZXMgPSBjc3NgXG4gIGRpc3BsYXk6IGJsb2NrO1xuICBtYXgtd2lkdGg6ICR7cmVtKDE1MCl9O1xuICBib3JkZXI6ICR7cmVtKDIpfSBkb3R0ZWQgYmxhY2s7XG4gIHBhZGRpbmc6ICR7cmVtKDQpfSAke3JlbSg4KX07XG4gIGZvbnQtc2l6ZTogJHtyZW0oMTYpfTtcbiAgbWFyZ2luOiAke3JlbSgxMCl9IGF1dG87XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcblxuICAmOmxpbmsge1xuICAgIGNvbG9yOiBibGFjaztcbiAgfVxuICAmOmFjdGl2ZSxcbiAgJjpob3ZlciB7XG4gICAgY29sb3I6IGJsdWU7XG4gIH1cbmA7XG5cbmNvbnN0IGJ1dHRvbkJhY2tncm91bmRDb2xvciA9ICh7XG4gIGNvbG9yLFxuICBkaXNhYmxlZCxcbn06IHtcbiAgY29sb3I6IHN0cmluZztcbiAgZGlzYWJsZWQ/OiBib29sZWFuO1xufSkgPT4gY3NzYFxuICBib3JkZXItY29sb3I6ICR7Y29sb3J9O1xuICBib3JkZXItcmFkaXVzOiAke3JlbSgxKX07XG4gIHBhZGRpbmc6ICR7cmVtKDIpfTtcbiAgbWFyZ2luOiAwO1xuXG4gICY6aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7ZGlzYWJsZWQgPyAnaW5pdGlhbCcgOiBjb2xvcn07XG4gICAgJHtkaXNhYmxlZCA/ICdjb2xvcjogbGlnaHRncmF5JyA6ICcnfTtcbiAgICBib3gtc2hhZG93OiBpbml0aWFsO1xuICB9XG5cbiAgJjphY3RpdmUge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICB9XG5gO1xuXG5jb25zdCBncmFwaE9wdGlvbkJsb2NrU3R5bGVzID0gY3NzYFxuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWZsb3c6IHJvdyBub3dyYXA7XG4gIG92ZXJmbG93LXg6IGF1dG87XG5gO1xuXG5jb25zdCBncmFwaE9wdGlvbkRpdlN0eWxlcyA9IGNzc2BcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1mbG93OiBjb2x1bW4gbm93cmFwO1xuICBtYXgtd2lkdGg6ICR7cmVtKDYwKX07XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIG1hcmdpbjogMCAke3JlbSgxMCl9O1xuXG4gICYuKiB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gIH1cbmA7XG5cbmNvbnN0IGNvbG9yUGlja2VyQ29udGFpbmVyU3R5bGVzID0gY3NzYFxuICBhbGlnbi1zZWxmOiBmbGV4LXN0YXJ0O1xuYDtcblxuY29uc3QgY29sb3JQaWNrZXJTdHlsZXMgPSBjc3NgXG4gIHBvc2l0aW9uOiBmaXhlZDtcbmA7XG5cbmNvbnN0IGZyYWN0aW9uSW5wdXRTdHlsZXMgPSBjc3NgXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgd2lkdGg6ICR7cmVtKDIwKX07XG5gO1xuXG5jb25zdCB7XG4gIHNlbGVjdEVudGl0aWVzOiBnbG9iYWxTZWxlY3RSYXdZYWhvb0ZpbmFuY2VFbnRpdGllcyxcbn0gPSByYXdZYWhvb0ZpbmFuY2VDaGFydERhdGFFbnRpdHlBZGFwdGVyLmdldFNlbGVjdG9ycyhcbiAgZ2xvYmFsU2VsZWN0UmF3WWFob29GaW5hbmNlRGF0YVxuKTtcblxuY29uc3Qge1xuICBzZWxlY3RBbGw6IGdsb2JhbFNlbGVjdE1hcmtldEdyYXBoRGlzcGxheU9wdGlvbkFycmF5LFxufSA9IGFzc2V0RGF0YUVudGl0eUFkYXB0ZXIuZ2V0U2VsZWN0b3JzKGdsb2JhbFNlbGVjdE1hcmtldEdyYXBoRGlzcGxheU9wdGlvbnMpO1xuXG5jb25zdCB7XG4gIHNlbGVjdEVudGl0aWVzOiBnbG9iYWxTZWxlY3RBbGxpb0FsbG9jYXRpb25FbnRpdGllcyxcbn0gPSBhc3NldERhdGFFbnRpdHlBZGFwdGVyLmdldFNlbGVjdG9ycyhnbG9iYWxTZWxlY3RBbGxpb0FsbG9jYXRpb24pO1xuXG5jb25zdCB7XG4gIHNlbGVjdEFsbDogZ2xvYmFsU2VsZWN0TWFya2V0R3JhcGhEYXRhQXJyYXksXG59ID0gZGF0ZVByaWNlRGF0YUVudGl0eUFkYXB0ZXIuZ2V0U2VsZWN0b3JzKGdsb2JhbFNlbGVjdE1hcmtldEdyYXBoRGF0YSk7XG5cbmNvbnN0IER5bmFtaWNHcmFwaCA9IGR5bmFtaWMoKCkgPT4gaW1wb3J0KCcuL0dyYXBoJyksIHsgc3NyOiBmYWxzZSB9KTtcblxuY29uc3QgTWFya2V0R3JhcGg6IEZDID0gKCkgPT4ge1xuICBjb25zdCBkaXNwYXRjaDogQXBwRGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICBjb25zdCB5YWhvb0ZpbmFuY2VEYXRhTG9hZGluZyA9IHVzZVNlbGVjdG9yKFxuICAgIGdsb2JhbFNlbGVjdFlhaG9vRmluYW5jZURhdGFMb2FkaW5nXG4gICk7XG4gIGNvbnN0IHlhaG9vRmluYW5jZURhdGFFcnJvck1lc3NhZ2UgPSB1c2VTZWxlY3RvcihcbiAgICBnbG9iYWxTZWxlY3RZYWhvb0ZpbmFuY2VEYXRhRXJyb3JNZXNzYWdlXG4gICk7XG4gIGNvbnN0IHRpY2tlciA9IHVzZVNlbGVjdG9yKGdsb2JhbFNlbGVjdE1hcmtldEdyYXBoVGlja2VyKTtcbiAgY29uc3QgaW5pdGlhbERhdGUgPSB1c2VTZWxlY3RvcihnbG9iYWxTZWxlY3RNYXJrZXRHcmFwaEluaXRpYWxEYXRlKTtcbiAgY29uc3QgZmluYWxEYXRlID0gdXNlU2VsZWN0b3IoZ2xvYmFsU2VsZWN0TWFya2V0R3JhcGhGaW5hbERhdGUpO1xuICBjb25zdCBpbml0aWFsRnVuZCA9IHVzZVNlbGVjdG9yKGdsb2JhbFNlbGVjdE1hcmtldEdyYXBoSW5pdGlhbEZ1bmQpO1xuICBjb25zdCByYXdZYWhvb0ZpbmFuY2VFbnRpdGllcyA9IHVzZVNlbGVjdG9yKFxuICAgIGdsb2JhbFNlbGVjdFJhd1lhaG9vRmluYW5jZUVudGl0aWVzXG4gICk7XG4gIGNvbnN0IGdyYXBoT3B0aW9uQXJyYXkgPSB1c2VTZWxlY3RvcihcbiAgICBnbG9iYWxTZWxlY3RNYXJrZXRHcmFwaERpc3BsYXlPcHRpb25BcnJheVxuICApO1xuICBjb25zdCBjb2xvcnMgPSBncmFwaE9wdGlvbkFycmF5LnJlZHVjZTxSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+PihcbiAgICAoYWNjdSwgZ3JhcGhPcHRpb24pID0+ICh7XG4gICAgICAuLi5hY2N1LFxuICAgICAgW2dyYXBoT3B0aW9uLmFzc2V0VHlwZV06IGdyYXBoT3B0aW9uLmRhdGEuY29sb3IsXG4gICAgfSksXG4gICAge31cbiAgKTtcbiAgY29uc3QgYWxsaW9BbGxvY2F0aW9uRW50aXRpZXMgPSB1c2VTZWxlY3RvcihcbiAgICBnbG9iYWxTZWxlY3RBbGxpb0FsbG9jYXRpb25FbnRpdGllc1xuICApO1xuICBjb25zdCBjc3ZVcmwgPSB1c2VTZWxlY3RvcihnbG9iYWxTZWxlY3RNYXJrZXRHcmFwaENzdlVybCk7XG4gIGNvbnN0IG1hcmtldEdyYXBoRGF0YUFycmF5ID0gdXNlU2VsZWN0b3IoZ2xvYmFsU2VsZWN0TWFya2V0R3JhcGhEYXRhQXJyYXkpO1xuXG4gIGNvbnN0IGhhbmRsZVRpY2tlckFkZCA9IGFzeW5jIChcbiAgICBldmVudDogRm9ybUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+IHwgRm9ybUV2ZW50PEhUTUxGb3JtRWxlbWVudD5cbiAgKSA9PiB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIGlmICh5YWhvb0ZpbmFuY2VEYXRhTG9hZGluZyB8fCByYXdZYWhvb0ZpbmFuY2VFbnRpdGllc1t0aWNrZXJdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGRpc3BhdGNoKGZldGNoTWFya2V0RGF0YUJ5VGlja2VyVGh1bmsodGlja2VyKSk7XG4gICAgICBjb25zdCBjaGFydERhdGEgPSB1bndyYXBSZXN1bHQocmVzcG9uc2UpO1xuICAgICAgaWYgKCFjaGFydERhdGEubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignbm8gY2hhcnQgZGF0YSBpcyBmZXRjaGVkJyk7XG4gICAgICB9XG4gICAgICBjb25zdCB7IHN5bWJvbCB9ID0gY2hhcnREYXRhWzBdLm1ldGE7XG4gICAgICBkaXNwYXRjaChwYXJzZU1hcmtldENsb3NlRGF0YShjaGFydERhdGFbMF0pKTtcbiAgICAgIGRpc3BhdGNoKGFkZEdyYXBoRGlzcGxheU9wdGlvbihzeW1ib2wpKTtcbiAgICAgIGRpc3BhdGNoKGFkZEFsbGlvQWxsb2NhdGlvbkFzc2V0KHN5bWJvbCkpO1xuICAgICAgZGlzcGF0Y2goY2hhbmdlVGlja2VyKCcnKSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZUdlbmVyYXRlR3JhcGhUcmlnZ2VyID0gYXN5bmMgKFxuICAgIGV2ZW50OiBGb3JtRXZlbnQ8SFRNTElucHV0RWxlbWVudD4gfCBGb3JtRXZlbnQ8SFRNTEZvcm1FbGVtZW50PlxuICApID0+IHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGRpc3BhdGNoKGdlbmVyYXRlTWFya2V0R3JhcGhEYXRhKCkpO1xuICAgIGRpc3BhdGNoKGdlbmVyYXRlQ3N2VXJsVGhydW5rKCkpO1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIDxmb3JtIG9uU3VibWl0PXtoYW5kbGVUaWNrZXJBZGR9PlxuICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgVGlja2VyIHRvIGFkZDpcbiAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgIG5hbWU9XCJ0aWNrZXJcIlxuICAgICAgICAgICAgdmFsdWU9e3RpY2tlcn1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXsoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgZGlzcGF0Y2goY2hhbmdlVGlja2VyKGV2ZW50LnRhcmdldC52YWx1ZSkpO1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8aW5wdXQgdHlwZT1cInN1Ym1pdFwiIHZhbHVlPVwiQWRkXCIgb25TdWJtaXQ9e2hhbmRsZVRpY2tlckFkZH0gLz5cbiAgICAgICAge3lhaG9vRmluYW5jZURhdGFMb2FkaW5nICYmIDxwPmxvYWRpbmc8L3A+fVxuICAgICAgICB7eWFob29GaW5hbmNlRGF0YUVycm9yTWVzc2FnZSAmJiA8cD57eWFob29GaW5hbmNlRGF0YUVycm9yTWVzc2FnZX08L3A+fVxuICAgICAgPC9mb3JtPlxuICAgICAgPGZvcm0gb25TdWJtaXQ9e2hhbmRsZUdlbmVyYXRlR3JhcGhUcmlnZ2VyfT5cbiAgICAgICAgPGxhYmVsPlxuICAgICAgICAgIEluaXRpYWwgRnVuZDpcbiAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgIHR5cGU9XCJudW1iZXJcIlxuICAgICAgICAgICAgbmFtZT1cImluaXRpYWxGdW5kXCJcbiAgICAgICAgICAgIHZhbHVlPXtpbml0aWFsRnVuZH1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXsoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgZGlzcGF0Y2goY2hhbmdlSW5pdGlhbEZ1bmQocGFyc2VJbnQoZXZlbnQudGFyZ2V0LnZhbHVlLCAxMCkpKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPGJyIC8+XG4gICAgICAgIDxsYWJlbD5cbiAgICAgICAgICBJbml0aWFsIERhdGU6XG4gICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICBuYW1lPVwiaW5pdGlhbERhdGVcIlxuICAgICAgICAgICAgdmFsdWU9e2luaXRpYWxEYXRlfVxuICAgICAgICAgICAgb25DaGFuZ2U9eyhldmVudCkgPT4ge1xuICAgICAgICAgICAgICBkaXNwYXRjaChjaGFuZ2VJbml0aWFsRGF0ZShldmVudC50YXJnZXQudmFsdWUpKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPGxhYmVsPlxuICAgICAgICAgIEZpbmFsIERhdGU6XG4gICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICBuYW1lPVwiZmluYWxEYXRlXCJcbiAgICAgICAgICAgIHZhbHVlPXtmaW5hbERhdGV9XG4gICAgICAgICAgICBvbkNoYW5nZT17KGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgIGRpc3BhdGNoKGNoYW5nZUZpbmFsRGF0ZShldmVudC50YXJnZXQudmFsdWUpKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPGJyIC8+XG4gICAgICAgIDxkaXYgY3NzPXtncmFwaE9wdGlvbkJsb2NrU3R5bGVzfT5cbiAgICAgICAgICB7Z3JhcGhPcHRpb25BcnJheS5tYXAoKGdyYXBoT3B0aW9uKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IGFzc2V0VHlwZSB9ID0gZ3JhcGhPcHRpb247XG4gICAgICAgICAgICBjb25zdCBhbGxpb0FsbG9jYXRpb24gPSBhbGxpb0FsbG9jYXRpb25FbnRpdGllc1thc3NldFR5cGVdO1xuICAgICAgICAgICAgY29uc3QgZ3JhcGhPcHRpb25JZCA9IGAke2Fzc2V0VHlwZX0tZ3JhcGgtb3B0aW9uYDtcbiAgICAgICAgICAgIGNvbnN0IHNob3dJZCA9IGAke2Fzc2V0VHlwZX0tc2hvd2A7XG4gICAgICAgICAgICBjb25zdCBhbGxpb0FsbG9jYXRpb25JZCA9IGAke2Fzc2V0VHlwZX0tYWxsaW8tYWxsb2NhdGlvbmA7XG4gICAgICAgICAgICBjb25zdCBudW1lcmF0b3JJZCA9IGAke2Fzc2V0VHlwZX0tbnVtZXJhdG9yYDtcbiAgICAgICAgICAgIGNvbnN0IGRlbm9taW5hdG9ySWQgPSBgJHthc3NldFR5cGV9LWRlbm9taW5hdG9yYDtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIDxkaXYga2V5PXtncmFwaE9wdGlvbklkfSBjc3M9e2dyYXBoT3B0aW9uRGl2U3R5bGVzfT5cbiAgICAgICAgICAgICAgICA8ZGl2Pnthc3NldFR5cGV9PC9kaXY+XG4gICAgICAgICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICAgIHR5cGU9XCJjaGVja2JveFwiXG4gICAgICAgICAgICAgICAgICAgIGlkPXtzaG93SWR9XG4gICAgICAgICAgICAgICAgICAgIG5hbWU9e3Nob3dJZH1cbiAgICAgICAgICAgICAgICAgICAgY2hlY2tlZD17Z3JhcGhPcHRpb24uZGF0YS5zaG93fVxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVHcmFwaERpc3BsYXlPcHRpb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NldFR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IGV2ZW50LnRhcmdldC5jaGVja2VkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogZ3JhcGhPcHRpb24uZGF0YS5jb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICBzaG93XG4gICAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICAgICB7IWdyYXBoT3B0aW9uLmRhdGEuZWRpdENvbG9yICYmIChcbiAgICAgICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICAgICAgY3NzPXtbXG4gICAgICAgICAgICAgICAgICAgICAgYnV0dG9uU3R5bGVzLFxuICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbkJhY2tncm91bmRDb2xvcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogZ3JhcGhPcHRpb24uZGF0YS5jb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiAhZ3JhcGhPcHRpb24uZGF0YS5zaG93LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBdfVxuICAgICAgICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9eyFncmFwaE9wdGlvbi5kYXRhLnNob3d9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaCh0b2dnbGVFZGl0Q29sb3IoYXNzZXRUeXBlKSk7XG4gICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yXG4gICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgIHtncmFwaE9wdGlvbi5kYXRhLmVkaXRDb2xvciAmJiAoXG4gICAgICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgY3NzPXtbXG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b25TdHlsZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b25CYWNrZ3JvdW5kQ29sb3Ioe1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogZ3JhcGhPcHRpb24uZGF0YS5jb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF19XG4gICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2godG9nZ2xlRWRpdENvbG9yKGFzc2V0VHlwZSkpO1xuICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICBkb25lXG4gICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17Y29sb3JQaWNrZXJDb250YWluZXJTdHlsZXN9PlxuICAgICAgICAgICAgICAgICAgICAgIDxTa2V0Y2hQaWNrZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzcz17Y29sb3JQaWNrZXJTdHlsZXN9XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcj17Z3JhcGhPcHRpb24uZGF0YS5jb2xvcn1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlQ29tcGxldGU9eyhjb2xvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVHcmFwaERpc3BsYXlPcHRpb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzZXRUeXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdzogZ3JhcGhPcHRpb24uZGF0YS5zaG93LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IGNvbG9yLmhleCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAge2FsbGlvQWxsb2NhdGlvbiAmJiAoXG4gICAgICAgICAgICAgICAgICA8ZGl2IGtleT17YWxsaW9BbGxvY2F0aW9uSWR9PlxuICAgICAgICAgICAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgQWxsb2NhdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzcz17ZnJhY3Rpb25JbnB1dFN0eWxlc31cbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkPXtudW1lcmF0b3JJZH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9e251bWVyYXRvcklkfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2FsbGlvQWxsb2NhdGlvbi5kYXRhLm51bWVyYXRvcn1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlQWxsaW9BbGxvY2F0aW9uUHJvcG9ydGlvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NldFR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1lcmF0b3I6IGV2ZW50LnRhcmdldC52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbm9taW5hdG9yOiBhbGxpb0FsbG9jYXRpb24uZGF0YS5kZW5vbWluYXRvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgIC9cbiAgICAgICAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzcz17ZnJhY3Rpb25JbnB1dFN0eWxlc31cbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkPXtkZW5vbWluYXRvcklkfVxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT17ZGVub21pbmF0b3JJZH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXthbGxpb0FsbG9jYXRpb24uZGF0YS5kZW5vbWluYXRvcn1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlQWxsaW9BbGxvY2F0aW9uUHJvcG9ydGlvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NldFR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1lcmF0b3I6IGFsbGlvQWxsb2NhdGlvbi5kYXRhLm51bWVyYXRvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbm9taW5hdG9yOiBldmVudC50YXJnZXQudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KX1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxiciAvPlxuICAgICAgICA8aW5wdXRcbiAgICAgICAgICBjc3M9e2J1dHRvblN0eWxlc31cbiAgICAgICAgICB0eXBlPVwic3VibWl0XCJcbiAgICAgICAgICB2YWx1ZT1cIkdlbmVyYXRlIEdycGFoXCJcbiAgICAgICAgICBvblN1Ym1pdD17aGFuZGxlR2VuZXJhdGVHcmFwaFRyaWdnZXJ9XG4gICAgICAgIC8+XG4gICAgICA8L2Zvcm0+XG4gICAgICA8RHluYW1pY0dyYXBoIGRhdGE9e21hcmtldEdyYXBoRGF0YUFycmF5fSBjb2xvcnM9e2NvbG9yc30gLz5cbiAgICAgIHtjc3ZVcmwgJiYgKFxuICAgICAgICA8YSBjc3M9e2Rvd25sb2FkTGlua1N0eWxlc30gZG93bmxvYWQ9XCJhc3NldERhdGEuY3N2XCIgaHJlZj17Y3N2VXJsfT5cbiAgICAgICAgICBEb3dubG9hZCBDU1ZcbiAgICAgICAgPC9hPlxuICAgICAgKX1cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE1hcmtldEdyYXBoO1xuIl19 */\");\nvar colorPickerContainerStyles = false ? undefined : {\n  name: \"11im5oc-colorPickerContainerStyles\",\n  styles: \"align-self:flex-start;label:colorPickerContainerStyles;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar colorPickerStyles = false ? undefined : {\n  name: \"1ibpb0r-colorPickerStyles\",\n  styles: \"position:fixed;label:colorPickerStyles;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar fractionInputStyles = /*#__PURE__*/Object(_emotion_react__WEBPACK_IMPORTED_MODULE_8__[\"css\"])(\"display:inline-block;width:\", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(20), \";\" + (false ? undefined : \";label:fractionInputStyles;\"), false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n\nvar _rawYahooFinanceChart = _rawYahooFinanceChartDataEntityAdapter__WEBPACK_IMPORTED_MODULE_16__[\"default\"].getSelectors(_marketGraphSelectors__WEBPACK_IMPORTED_MODULE_14__[\"globalSelectRawYahooFinanceData\"]),\n    globalSelectRawYahooFinanceEntities = _rawYahooFinanceChart.selectEntities;\n\nvar _assetDataEntityAdapt = _assetDataEntityAdapter__WEBPACK_IMPORTED_MODULE_11__[\"default\"].getSelectors(_marketGraphSelectors__WEBPACK_IMPORTED_MODULE_14__[\"globalSelectMarketGraphDisplayOptions\"]),\n    globalSelectMarketGraphDisplayOptionArray = _assetDataEntityAdapt.selectAll;\n\nvar _assetDataEntityAdapt2 = _assetDataEntityAdapter__WEBPACK_IMPORTED_MODULE_11__[\"default\"].getSelectors(_marketGraphSelectors__WEBPACK_IMPORTED_MODULE_14__[\"globalSelectAllioAllocation\"]),\n    globalSelectAllioAllocationEntities = _assetDataEntityAdapt2.selectEntities;\n\nvar _datePriceDataEntityA = _datePriceDataEntityAdapter__WEBPACK_IMPORTED_MODULE_17__[\"default\"].getSelectors(_marketGraphSelectors__WEBPACK_IMPORTED_MODULE_14__[\"globalSelectMarketGraphData\"]),\n    globalSelectMarketGraphDataArray = _datePriceDataEntityA.selectAll;\n\nvar DynamicGraph = next_dynamic__WEBPACK_IMPORTED_MODULE_6___default()(_c = function _c() {\n  return __webpack_require__.e(/*! import() */ 1).then(__webpack_require__.bind(null, /*! ./Graph */ \"./src/features/marketGraph/Graph.tsx\"));\n}, {\n  ssr: false,\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [/*require.resolve*/(/*! ./Graph */ \"./src/features/marketGraph/Graph.tsx\")];\n    },\n    modules: ['./Graph']\n  }\n});\n_c2 = DynamicGraph;\n\nvar MarketGraph = function MarketGraph() {\n  _s();\n\n  var dispatch = Object(react_redux__WEBPACK_IMPORTED_MODULE_5__[\"useDispatch\"])();\n  var yahooFinanceDataLoading = Object(react_redux__WEBPACK_IMPORTED_MODULE_5__[\"useSelector\"])(_marketGraphSelectors__WEBPACK_IMPORTED_MODULE_14__[\"globalSelectYahooFinanceDataLoading\"]);\n  var yahooFinanceDataErrorMessage = Object(react_redux__WEBPACK_IMPORTED_MODULE_5__[\"useSelector\"])(_marketGraphSelectors__WEBPACK_IMPORTED_MODULE_14__[\"globalSelectYahooFinanceDataErrorMessage\"]);\n  var ticker = Object(react_redux__WEBPACK_IMPORTED_MODULE_5__[\"useSelector\"])(_marketGraphSelectors__WEBPACK_IMPORTED_MODULE_14__[\"globalSelectMarketGraphTicker\"]);\n  var initialDate = Object(react_redux__WEBPACK_IMPORTED_MODULE_5__[\"useSelector\"])(_marketGraphSelectors__WEBPACK_IMPORTED_MODULE_14__[\"globalSelectMarketGraphInitialDate\"]);\n  var finalDate = Object(react_redux__WEBPACK_IMPORTED_MODULE_5__[\"useSelector\"])(_marketGraphSelectors__WEBPACK_IMPORTED_MODULE_14__[\"globalSelectMarketGraphFinalDate\"]);\n  var initialFund = Object(react_redux__WEBPACK_IMPORTED_MODULE_5__[\"useSelector\"])(_marketGraphSelectors__WEBPACK_IMPORTED_MODULE_14__[\"globalSelectMarketGraphInitialFund\"]);\n  var rawYahooFinanceEntities = Object(react_redux__WEBPACK_IMPORTED_MODULE_5__[\"useSelector\"])(globalSelectRawYahooFinanceEntities);\n  var graphOptionArray = Object(react_redux__WEBPACK_IMPORTED_MODULE_5__[\"useSelector\"])(globalSelectMarketGraphDisplayOptionArray);\n  var colors = graphOptionArray.reduce(function (accu, graphOption) {\n    return _objectSpread(_objectSpread({}, accu), {}, Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, graphOption.assetType, graphOption.data.color));\n  }, {});\n  var allioAllocationEntities = Object(react_redux__WEBPACK_IMPORTED_MODULE_5__[\"useSelector\"])(globalSelectAllioAllocationEntities);\n  var csvUrl = Object(react_redux__WEBPACK_IMPORTED_MODULE_5__[\"useSelector\"])(_marketGraphSelectors__WEBPACK_IMPORTED_MODULE_14__[\"globalSelectMarketGraphCsvUrl\"]);\n  var marketGraphDataArray = Object(react_redux__WEBPACK_IMPORTED_MODULE_5__[\"useSelector\"])(globalSelectMarketGraphDataArray);\n\n  var handleTickerAdd = /*#__PURE__*/function () {\n    var _ref2 = Object(_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee(event) {\n      var response, chartData, symbol;\n      return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              event.preventDefault();\n\n              if (!(yahooFinanceDataLoading || rawYahooFinanceEntities[ticker])) {\n                _context.next = 3;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 3:\n              _context.prev = 3;\n              _context.next = 6;\n              return dispatch(Object(_fetchMarketDataByTickerThunk__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(ticker));\n\n            case 6:\n              response = _context.sent;\n              chartData = Object(_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_4__[\"unwrapResult\"])(response);\n\n              if (chartData.length) {\n                _context.next = 10;\n                break;\n              }\n\n              throw new Error('no chart data is fetched');\n\n            case 10:\n              symbol = chartData[0].meta.symbol;\n              dispatch(Object(_marketGraphSlice__WEBPACK_IMPORTED_MODULE_15__[\"parseMarketCloseData\"])(chartData[0]));\n              dispatch(Object(_marketGraphSlice__WEBPACK_IMPORTED_MODULE_15__[\"addGraphDisplayOption\"])(symbol));\n              dispatch(Object(_marketGraphSlice__WEBPACK_IMPORTED_MODULE_15__[\"addAllioAllocationAsset\"])(symbol));\n              dispatch(Object(_marketGraphSlice__WEBPACK_IMPORTED_MODULE_15__[\"changeTicker\"])(''));\n              _context.next = 20;\n              break;\n\n            case 17:\n              _context.prev = 17;\n              _context.t0 = _context[\"catch\"](3);\n              console.error(_context.t0);\n\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 17]]);\n    }));\n\n    return function handleTickerAdd(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handleGenerateGraphTrigger = /*#__PURE__*/function () {\n    var _ref3 = Object(_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee2(event) {\n      return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              event.preventDefault();\n              dispatch(Object(_marketGraphSlice__WEBPACK_IMPORTED_MODULE_15__[\"generateMarketGraphData\"])());\n              dispatch(Object(_generateCsvUrlThrunk__WEBPACK_IMPORTED_MODULE_13__[\"default\"])());\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handleGenerateGraphTrigger(_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"div\", {\n    children: [Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"form\", {\n      onSubmit: handleTickerAdd,\n      children: [Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"label\", {\n        children: [\"Ticker to add:\", Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"input\", {\n          type: \"text\",\n          name: \"ticker\",\n          value: ticker,\n          onChange: function onChange(event) {\n            dispatch(Object(_marketGraphSlice__WEBPACK_IMPORTED_MODULE_15__[\"changeTicker\"])(event.target.value));\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, _this), Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"input\", {\n        type: \"submit\",\n        value: \"Add\",\n        onSubmit: handleTickerAdd\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, _this), yahooFinanceDataLoading && Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"p\", {\n        children: \"loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 37\n      }, _this), yahooFinanceDataErrorMessage && Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"p\", {\n        children: yahooFinanceDataErrorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 42\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, _this), Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"form\", {\n      onSubmit: handleGenerateGraphTrigger,\n      children: [Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"label\", {\n        children: [\"Initial Fund:\", Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"input\", {\n          type: \"number\",\n          name: \"initialFund\",\n          value: initialFund,\n          onChange: function onChange(event) {\n            dispatch(Object(_marketGraphSlice__WEBPACK_IMPORTED_MODULE_15__[\"changeInitialFund\"])(parseInt(event.target.value, 10)));\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, _this), Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, _this), Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"label\", {\n        children: [\"Initial Date:\", Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"input\", {\n          type: \"text\",\n          name: \"initialDate\",\n          value: initialDate,\n          onChange: function onChange(event) {\n            dispatch(Object(_marketGraphSlice__WEBPACK_IMPORTED_MODULE_15__[\"changeInitialDate\"])(event.target.value));\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, _this), Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"label\", {\n        children: [\"Final Date:\", Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"input\", {\n          type: \"text\",\n          name: \"finalDate\",\n          value: finalDate,\n          onChange: function onChange(event) {\n            dispatch(Object(_marketGraphSlice__WEBPACK_IMPORTED_MODULE_15__[\"changeFinalDate\"])(event.target.value));\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }, _this), Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }, _this), Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"div\", {\n        css: graphOptionBlockStyles,\n        children: graphOptionArray.map(function (graphOption) {\n          var assetType = graphOption.assetType;\n          var allioAllocation = allioAllocationEntities[assetType];\n          var graphOptionId = \"\".concat(assetType, \"-graph-option\");\n          var showId = \"\".concat(assetType, \"-show\");\n          var allioAllocationId = \"\".concat(assetType, \"-allio-allocation\");\n          var numeratorId = \"\".concat(assetType, \"-numerator\");\n          var denominatorId = \"\".concat(assetType, \"-denominator\");\n          return Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"div\", {\n            css: graphOptionDivStyles,\n            children: [Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"div\", {\n              children: assetType\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 17\n            }, _this), Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"label\", {\n              children: [Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"input\", {\n                type: \"checkbox\",\n                id: showId,\n                name: showId,\n                checked: graphOption.data.show,\n                onChange: function onChange(event) {\n                  dispatch(Object(_marketGraphSlice__WEBPACK_IMPORTED_MODULE_15__[\"updateGraphDisplayOption\"])({\n                    assetType: assetType,\n                    show: event.target.checked,\n                    color: graphOption.data.color\n                  }));\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 289,\n                columnNumber: 19\n              }, _this), \"show\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 17\n            }, _this), !graphOption.data.editColor && Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"button\", {\n              css: [buttonStyles, buttonBackgroundColor({\n                color: graphOption.data.color,\n                disabled: !graphOption.data.show\n              }), false ? undefined : \";label:MarketGraph;\", false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"],\n              type: \"button\",\n              disabled: !graphOption.data.show,\n              onClick: function onClick() {\n                dispatch(Object(_marketGraphSlice__WEBPACK_IMPORTED_MODULE_15__[\"toggleEditColor\"])(assetType));\n              },\n              children: \"color\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 19\n            }, _this), graphOption.data.editColor && Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"Fragment\"], {\n              children: [Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"button\", {\n                css: [buttonStyles, buttonBackgroundColor({\n                  color: graphOption.data.color\n                }), false ? undefined : \";label:MarketGraph;\", false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"],\n                type: \"button\",\n                onClick: function onClick() {\n                  dispatch(Object(_marketGraphSlice__WEBPACK_IMPORTED_MODULE_15__[\"toggleEditColor\"])(assetType));\n                },\n                children: \"done\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 326,\n                columnNumber: 21\n              }, _this), Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"div\", {\n                css: colorPickerContainerStyles,\n                children: Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(react_color__WEBPACK_IMPORTED_MODULE_7__[\"SketchPicker\"], {\n                  css: colorPickerStyles,\n                  color: graphOption.data.color,\n                  onChangeComplete: function onChangeComplete(color) {\n                    dispatch(Object(_marketGraphSlice__WEBPACK_IMPORTED_MODULE_15__[\"updateGraphDisplayOption\"])({\n                      assetType: assetType,\n                      show: graphOption.data.show,\n                      color: color.hex\n                    }));\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 341,\n                  columnNumber: 23\n                }, _this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 340,\n                columnNumber: 21\n              }, _this)]\n            }, void 0, true), allioAllocation && Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"div\", {\n              children: Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"label\", {\n                children: [\"Allocation:\", Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"input\", {\n                  css: fractionInputStyles,\n                  type: \"text\",\n                  id: numeratorId,\n                  name: numeratorId,\n                  value: allioAllocation.data.numerator,\n                  onChange: function onChange(event) {\n                    dispatch(Object(_marketGraphSlice__WEBPACK_IMPORTED_MODULE_15__[\"updateAllioAllocationProportion\"])({\n                      assetType: assetType,\n                      numerator: event.target.value,\n                      denominator: allioAllocation.data.denominator\n                    }));\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 361,\n                  columnNumber: 23\n                }, _this), \"/\", Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"input\", {\n                  css: fractionInputStyles,\n                  type: \"text\",\n                  id: denominatorId,\n                  name: denominatorId,\n                  value: allioAllocation.data.denominator,\n                  onChange: function onChange(event) {\n                    dispatch(Object(_marketGraphSlice__WEBPACK_IMPORTED_MODULE_15__[\"updateAllioAllocationProportion\"])({\n                      assetType: assetType,\n                      numerator: allioAllocation.data.numerator,\n                      denominator: event.target.value\n                    }));\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 378,\n                  columnNumber: 23\n                }, _this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 359,\n                columnNumber: 21\n              }, _this)\n            }, allioAllocationId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 358,\n              columnNumber: 19\n            }, _this)]\n          }, graphOptionId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 15\n          }, _this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, _this), Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 9\n      }, _this), Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"input\", {\n        css: buttonStyles,\n        type: \"submit\",\n        value: \"Generate Grpah\",\n        onSubmit: handleGenerateGraphTrigger\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, _this), Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(DynamicGraph, {\n      data: marketGraphDataArray,\n      colors: colors\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 7\n    }, _this), csvUrl && Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"a\", {\n      css: downloadLinkStyles,\n      download: \"assetData.csv\",\n      href: csvUrl,\n      children: \"Download CSV\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 9\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 223,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(MarketGraph, \"6WU+VP4ky7mTVcJ0FBjFsgruhJ8=\", false, function () {\n  return [react_redux__WEBPACK_IMPORTED_MODULE_5__[\"useDispatch\"], react_redux__WEBPACK_IMPORTED_MODULE_5__[\"useSelector\"], react_redux__WEBPACK_IMPORTED_MODULE_5__[\"useSelector\"], react_redux__WEBPACK_IMPORTED_MODULE_5__[\"useSelector\"], react_redux__WEBPACK_IMPORTED_MODULE_5__[\"useSelector\"], react_redux__WEBPACK_IMPORTED_MODULE_5__[\"useSelector\"], react_redux__WEBPACK_IMPORTED_MODULE_5__[\"useSelector\"], react_redux__WEBPACK_IMPORTED_MODULE_5__[\"useSelector\"], react_redux__WEBPACK_IMPORTED_MODULE_5__[\"useSelector\"], react_redux__WEBPACK_IMPORTED_MODULE_5__[\"useSelector\"], react_redux__WEBPACK_IMPORTED_MODULE_5__[\"useSelector\"], react_redux__WEBPACK_IMPORTED_MODULE_5__[\"useSelector\"]];\n});\n\n_c3 = MarketGraph;\n/* harmony default export */ __webpack_exports__[\"default\"] = (MarketGraph);\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"DynamicGraph$dynamic\");\n$RefreshReg$(_c2, \"DynamicGraph\");\n$RefreshReg$(_c3, \"MarketGraph\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/features/marketGraph/MarketGraph.tsx\n");

/***/ })

})