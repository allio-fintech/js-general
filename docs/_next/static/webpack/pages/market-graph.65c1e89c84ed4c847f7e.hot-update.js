webpackHotUpdate_N_E("pages/market-graph",{

/***/ "./src/features/marketGraph/MarketGraph.tsx":
/*!**************************************************!*\
  !*** ./src/features/marketGraph/MarketGraph.tsx ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ \"./node_modules/@babel/runtime/regenerator/index.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/asyncToGenerator */ \"./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var _emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @emotion/react/jsx-dev-runtime */ \"./node_modules/@emotion/react/jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js\");\n/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @reduxjs/toolkit */ \"./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-redux */ \"./node_modules/react-redux/es/index.js\");\n/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dynamic */ \"./node_modules/next/dynamic.js\");\n/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dynamic__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var react_color__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react-color */ \"./node_modules/react-color/es/index.js\");\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @emotion/react */ \"./node_modules/@emotion/react/dist/emotion-react.browser.esm.js\");\n/* harmony import */ var utils_styles_rem__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! utils/styles/rem */ \"./src/utils/styles/rem.ts\");\n/* harmony import */ var utils_styles_transition__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! utils/styles/transition */ \"./src/utils/styles/transition.ts\");\n/* harmony import */ var _assetDataEntityAdapter__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./assetDataEntityAdapter */ \"./src/features/marketGraph/assetDataEntityAdapter.ts\");\n/* harmony import */ var _fetchMarketDataByTickerThunk__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./fetchMarketDataByTickerThunk */ \"./src/features/marketGraph/fetchMarketDataByTickerThunk.ts\");\n/* harmony import */ var _generateCsvUrlThrunk__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./generateCsvUrlThrunk */ \"./src/features/marketGraph/generateCsvUrlThrunk.ts\");\n/* harmony import */ var _marketGraphSelectors__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./marketGraphSelectors */ \"./src/features/marketGraph/marketGraphSelectors.tsx\");\n/* harmony import */ var _marketGraphSlice__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./marketGraphSlice */ \"./src/features/marketGraph/marketGraphSlice.ts\");\n/* harmony import */ var _rawYahooFinanceChartDataEntityAdapter__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./rawYahooFinanceChartDataEntityAdapter */ \"./src/features/marketGraph/rawYahooFinanceChartDataEntityAdapter.ts\");\n/* harmony import */ var _datePriceDataEntityAdapter__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./datePriceDataEntityAdapter */ \"./src/features/marketGraph/datePriceDataEntityAdapter.ts\");\n\n\n\n\n\n\nvar _jsxFileName = \"/home/clfhhc/src/allio/js-general/frontend/src/features/marketGraph/MarketGraph.tsx\",\n    _this = undefined,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar buttonStyles = /*#__PURE__*/Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__[\"css\"])(\"padding:\", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(4), \" \", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(8), \";border-radius:\", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(10), \";cursor:pointer;border:\", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(2), \" solid #4caf50;\", Object(utils_styles_transition__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(100)('all'), \";font-size:\", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(16), \";margin:\", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(10), \" \", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(20), \";outline:None;&:hover{background-color:#4caf50;color:white;box-shadow:0 \", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(12), \" \", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(16), \" 0 rgba(0, 0, 0, 0.24),0 \", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(17), \" \", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(50), \" 0 rgba(0, 0, 0, 0.19);}&:active{background-color:white;color:black;box-shadow:0 \", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(3), \" \", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(4), \" 0 rgba(0, 0, 0, 0.24),0 \", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(4), \" \", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(13), \" 0 rgba(0, 0, 0, 0.19);}\" + (false ? undefined : \";label:buttonStyles;\"), false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\nvar downloadLinkStyles = /*#__PURE__*/Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__[\"css\"])(\"display:block;max-width:\", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(150), \";border:\", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(2), \" dotted black;padding:\", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(4), \" \", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(8), \";font-size:\", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(16), \";margin:\", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(10), \" auto;text-align:center;&:link{color:black;}&:active,&:hover{color:blue;}\" + (false ? undefined : \";label:downloadLinkStyles;\"), false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2NsZmhoYy9zcmMvYWxsaW8vanMtZ2VuZXJhbC9mcm9udGVuZC9zcmMvZmVhdHVyZXMvbWFya2V0R3JhcGgvTWFya2V0R3JhcGgudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWtFOEIiLCJmaWxlIjoiL2hvbWUvY2xmaGhjL3NyYy9hbGxpby9qcy1nZW5lcmFsL2Zyb250ZW5kL3NyYy9mZWF0dXJlcy9tYXJrZXRHcmFwaC9NYXJrZXRHcmFwaC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1bndyYXBSZXN1bHQgfSBmcm9tICdAcmVkdXhqcy90b29sa2l0JztcbmltcG9ydCB7IEFwcERpc3BhdGNoIH0gZnJvbSAnZmVhdHVyZXMvcmVkdXgvc3RvcmUnO1xuaW1wb3J0IHsgRkMsIEZvcm1FdmVudCwgRnJhZ21lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgZHluYW1pYyBmcm9tICduZXh0L2R5bmFtaWMnO1xuaW1wb3J0IHsgU2tldGNoUGlja2VyIH0gZnJvbSAncmVhY3QtY29sb3InO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHJlbSBmcm9tICd1dGlscy9zdHlsZXMvcmVtJztcbmltcG9ydCB0cmFuc2l0aW9uIGZyb20gJ3V0aWxzL3N0eWxlcy90cmFuc2l0aW9uJztcbmltcG9ydCBhc3NldERhdGFFbnRpdHlBZGFwdGVyIGZyb20gJy4vYXNzZXREYXRhRW50aXR5QWRhcHRlcic7XG5pbXBvcnQgZmV0Y2hNYXJrZXREYXRhQnlUaWNrZXJUaHVuayBmcm9tICcuL2ZldGNoTWFya2V0RGF0YUJ5VGlja2VyVGh1bmsnO1xuaW1wb3J0IGdlbmVyYXRlQ3N2VXJsVGhydW5rIGZyb20gJy4vZ2VuZXJhdGVDc3ZVcmxUaHJ1bmsnO1xuaW1wb3J0IHtcbiAgZ2xvYmFsU2VsZWN0WWFob29GaW5hbmNlRGF0YUxvYWRpbmcsXG4gIGdsb2JhbFNlbGVjdFlhaG9vRmluYW5jZURhdGFFcnJvck1lc3NhZ2UsXG4gIGdsb2JhbFNlbGVjdE1hcmtldEdyYXBoVGlja2VyLFxuICBnbG9iYWxTZWxlY3RNYXJrZXRHcmFwaEluaXRpYWxEYXRlLFxuICBnbG9iYWxTZWxlY3RNYXJrZXRHcmFwaEluaXRpYWxGdW5kLFxuICBnbG9iYWxTZWxlY3RSYXdZYWhvb0ZpbmFuY2VEYXRhLFxuICBnbG9iYWxTZWxlY3RNYXJrZXRHcmFwaERpc3BsYXlPcHRpb25zLFxuICBnbG9iYWxTZWxlY3RNYXJrZXRHcmFwaEZpbmFsRGF0ZSxcbiAgZ2xvYmFsU2VsZWN0QWxsaW9BbGxvY2F0aW9uLFxuICBnbG9iYWxTZWxlY3RNYXJrZXRHcmFwaENzdlVybCxcbiAgZ2xvYmFsU2VsZWN0TWFya2V0R3JhcGhEYXRhLFxufSBmcm9tICcuL21hcmtldEdyYXBoU2VsZWN0b3JzJztcbmltcG9ydCB7XG4gIGFkZEdyYXBoRGlzcGxheU9wdGlvbixcbiAgY2hhbmdlSW5pdGlhbERhdGUsXG4gIGNoYW5nZUZpbmFsRGF0ZSxcbiAgY2hhbmdlSW5pdGlhbEZ1bmQsXG4gIGNoYW5nZVRpY2tlcixcbiAgcGFyc2VNYXJrZXRDbG9zZURhdGEsXG4gIHVwZGF0ZUdyYXBoRGlzcGxheU9wdGlvbixcbiAgdXBkYXRlQWxsaW9BbGxvY2F0aW9uUHJvcG9ydGlvbixcbiAgYWRkQWxsaW9BbGxvY2F0aW9uQXNzZXQsXG4gIGdlbmVyYXRlTWFya2V0R3JhcGhEYXRhLFxuICB0b2dnbGVFZGl0Q29sb3IsXG59IGZyb20gJy4vbWFya2V0R3JhcGhTbGljZSc7XG5pbXBvcnQgcmF3WWFob29GaW5hbmNlQ2hhcnREYXRhRW50aXR5QWRhcHRlciBmcm9tICcuL3Jhd1lhaG9vRmluYW5jZUNoYXJ0RGF0YUVudGl0eUFkYXB0ZXInO1xuaW1wb3J0IGRhdGVQcmljZURhdGFFbnRpdHlBZGFwdGVyIGZyb20gJy4vZGF0ZVByaWNlRGF0YUVudGl0eUFkYXB0ZXInO1xuXG5jb25zdCBidXR0b25TdHlsZXMgPSBjc3NgXG4gIHBhZGRpbmc6ICR7cmVtKDQpfSAke3JlbSg4KX07XG4gIGJvcmRlci1yYWRpdXM6ICR7cmVtKDEwKX07XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgYm9yZGVyOiAke3JlbSgyKX0gc29saWQgIzRjYWY1MDtcbiAgJHt0cmFuc2l0aW9uKDEwMCkoJ2FsbCcpfTtcbiAgZm9udC1zaXplOiAke3JlbSgxNil9O1xuICBtYXJnaW46ICR7cmVtKDEwKX0gJHtyZW0oMjApfTtcbiAgb3V0bGluZTogTm9uZTtcblxuICAmOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNGNhZjUwO1xuICAgIGNvbG9yOiB3aGl0ZTtcbiAgICBib3gtc2hhZG93OiAwICR7cmVtKDEyKX0gJHtyZW0oMTYpfSAwIHJnYmEoMCwgMCwgMCwgMC4yNCksXG4gICAgICAwICR7cmVtKDE3KX0gJHtyZW0oNTApfSAwIHJnYmEoMCwgMCwgMCwgMC4xOSk7XG4gIH1cblxuICAmOmFjdGl2ZSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gICAgY29sb3I6IGJsYWNrO1xuICAgIGJveC1zaGFkb3c6IDAgJHtyZW0oMyl9ICR7cmVtKDQpfSAwIHJnYmEoMCwgMCwgMCwgMC4yNCksXG4gICAgICAwICR7cmVtKDQpfSAke3JlbSgxMyl9IDAgcmdiYSgwLCAwLCAwLCAwLjE5KTtcbiAgfVxuYDtcblxuY29uc3QgZG93bmxvYWRMaW5rU3R5bGVzID0gY3NzYFxuICBkaXNwbGF5OiBibG9jaztcbiAgbWF4LXdpZHRoOiAke3JlbSgxNTApfTtcbiAgYm9yZGVyOiAke3JlbSgyKX0gZG90dGVkIGJsYWNrO1xuICBwYWRkaW5nOiAke3JlbSg0KX0gJHtyZW0oOCl9O1xuICBmb250LXNpemU6ICR7cmVtKDE2KX07XG4gIG1hcmdpbjogJHtyZW0oMTApfSBhdXRvO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5cbiAgJjpsaW5rIHtcbiAgICBjb2xvcjogYmxhY2s7XG4gIH1cbiAgJjphY3RpdmUsXG4gICY6aG92ZXIge1xuICAgIGNvbG9yOiBibHVlO1xuICB9XG5gO1xuXG5jb25zdCBidXR0b25CYWNrZ3JvdW5kQ29sb3IgPSAoe1xuICBjb2xvcixcbiAgZGlzYWJsZWQsXG59OiB7XG4gIGNvbG9yOiBzdHJpbmc7XG4gIGRpc2FibGVkPzogYm9vbGVhbjtcbn0pID0+IGNzc2BcbiAgYm9yZGVyLWNvbG9yOiAke2NvbG9yfTtcbiAgYm9yZGVyLXJhZGl1czogJHtyZW0oMSl9O1xuICBwYWRkaW5nOiAke3JlbSgyKX07XG4gIG1hcmdpbjogMDtcblxuICAmOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2Rpc2FibGVkID8gJ2luaXRpYWwnIDogY29sb3J9O1xuICAgICR7ZGlzYWJsZWQgPyAnY29sb3I6IGxpZ2h0Z3JheScgOiAnJ307XG4gICAgYm94LXNoYWRvdzogaW5pdGlhbDtcbiAgfVxuXG4gICY6YWN0aXZlIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgfVxuYDtcblxuY29uc3QgZ3JhcGhPcHRpb25EaXZTdHlsZXMgPSBjc3NgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIG1heC13aWR0aDogJHtyZW0oMjApfTtcbiAgJi4qIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgfVxuYDtcblxuY29uc3Qge1xuICBzZWxlY3RFbnRpdGllczogZ2xvYmFsU2VsZWN0UmF3WWFob29GaW5hbmNlRW50aXRpZXMsXG59ID0gcmF3WWFob29GaW5hbmNlQ2hhcnREYXRhRW50aXR5QWRhcHRlci5nZXRTZWxlY3RvcnMoXG4gIGdsb2JhbFNlbGVjdFJhd1lhaG9vRmluYW5jZURhdGFcbik7XG5cbmNvbnN0IHtcbiAgc2VsZWN0QWxsOiBnbG9iYWxTZWxlY3RNYXJrZXRHcmFwaERpc3BsYXlPcHRpb25BcnJheSxcbn0gPSBhc3NldERhdGFFbnRpdHlBZGFwdGVyLmdldFNlbGVjdG9ycyhnbG9iYWxTZWxlY3RNYXJrZXRHcmFwaERpc3BsYXlPcHRpb25zKTtcblxuY29uc3Qge1xuICBzZWxlY3RFbnRpdGllczogZ2xvYmFsU2VsZWN0QWxsaW9BbGxvY2F0aW9uRW50aXRpZXMsXG59ID0gYXNzZXREYXRhRW50aXR5QWRhcHRlci5nZXRTZWxlY3RvcnMoZ2xvYmFsU2VsZWN0QWxsaW9BbGxvY2F0aW9uKTtcblxuY29uc3Qge1xuICBzZWxlY3RBbGw6IGdsb2JhbFNlbGVjdE1hcmtldEdyYXBoRGF0YUFycmF5LFxufSA9IGRhdGVQcmljZURhdGFFbnRpdHlBZGFwdGVyLmdldFNlbGVjdG9ycyhnbG9iYWxTZWxlY3RNYXJrZXRHcmFwaERhdGEpO1xuXG5jb25zdCBEeW5hbWljR3JhcGggPSBkeW5hbWljKCgpID0+IGltcG9ydCgnLi9HcmFwaCcpLCB7IHNzcjogZmFsc2UgfSk7XG5cbmNvbnN0IE1hcmtldEdyYXBoOiBGQyA9ICgpID0+IHtcbiAgY29uc3QgZGlzcGF0Y2g6IEFwcERpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcbiAgY29uc3QgeWFob29GaW5hbmNlRGF0YUxvYWRpbmcgPSB1c2VTZWxlY3RvcihcbiAgICBnbG9iYWxTZWxlY3RZYWhvb0ZpbmFuY2VEYXRhTG9hZGluZ1xuICApO1xuICBjb25zdCB5YWhvb0ZpbmFuY2VEYXRhRXJyb3JNZXNzYWdlID0gdXNlU2VsZWN0b3IoXG4gICAgZ2xvYmFsU2VsZWN0WWFob29GaW5hbmNlRGF0YUVycm9yTWVzc2FnZVxuICApO1xuICBjb25zdCB0aWNrZXIgPSB1c2VTZWxlY3RvcihnbG9iYWxTZWxlY3RNYXJrZXRHcmFwaFRpY2tlcik7XG4gIGNvbnN0IGluaXRpYWxEYXRlID0gdXNlU2VsZWN0b3IoZ2xvYmFsU2VsZWN0TWFya2V0R3JhcGhJbml0aWFsRGF0ZSk7XG4gIGNvbnN0IGZpbmFsRGF0ZSA9IHVzZVNlbGVjdG9yKGdsb2JhbFNlbGVjdE1hcmtldEdyYXBoRmluYWxEYXRlKTtcbiAgY29uc3QgaW5pdGlhbEZ1bmQgPSB1c2VTZWxlY3RvcihnbG9iYWxTZWxlY3RNYXJrZXRHcmFwaEluaXRpYWxGdW5kKTtcbiAgY29uc3QgcmF3WWFob29GaW5hbmNlRW50aXRpZXMgPSB1c2VTZWxlY3RvcihcbiAgICBnbG9iYWxTZWxlY3RSYXdZYWhvb0ZpbmFuY2VFbnRpdGllc1xuICApO1xuICBjb25zdCBncmFwaE9wdGlvbkFycmF5ID0gdXNlU2VsZWN0b3IoXG4gICAgZ2xvYmFsU2VsZWN0TWFya2V0R3JhcGhEaXNwbGF5T3B0aW9uQXJyYXlcbiAgKTtcbiAgY29uc3QgY29sb3JzID0gZ3JhcGhPcHRpb25BcnJheS5yZWR1Y2U8UmVjb3JkPHN0cmluZywgc3RyaW5nPj4oXG4gICAgKGFjY3UsIGdyYXBoT3B0aW9uKSA9PiAoe1xuICAgICAgLi4uYWNjdSxcbiAgICAgIFtncmFwaE9wdGlvbi5hc3NldFR5cGVdOiBncmFwaE9wdGlvbi5kYXRhLmNvbG9yLFxuICAgIH0pLFxuICAgIHt9XG4gICk7XG4gIGNvbnN0IGFsbGlvQWxsb2NhdGlvbkVudGl0aWVzID0gdXNlU2VsZWN0b3IoXG4gICAgZ2xvYmFsU2VsZWN0QWxsaW9BbGxvY2F0aW9uRW50aXRpZXNcbiAgKTtcbiAgY29uc3QgY3N2VXJsID0gdXNlU2VsZWN0b3IoZ2xvYmFsU2VsZWN0TWFya2V0R3JhcGhDc3ZVcmwpO1xuICBjb25zdCBtYXJrZXRHcmFwaERhdGFBcnJheSA9IHVzZVNlbGVjdG9yKGdsb2JhbFNlbGVjdE1hcmtldEdyYXBoRGF0YUFycmF5KTtcblxuICBjb25zdCBoYW5kbGVUaWNrZXJBZGQgPSBhc3luYyAoXG4gICAgZXZlbnQ6IEZvcm1FdmVudDxIVE1MSW5wdXRFbGVtZW50PiB8IEZvcm1FdmVudDxIVE1MRm9ybUVsZW1lbnQ+XG4gICkgPT4ge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBpZiAoeWFob29GaW5hbmNlRGF0YUxvYWRpbmcgfHwgcmF3WWFob29GaW5hbmNlRW50aXRpZXNbdGlja2VyXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBkaXNwYXRjaChmZXRjaE1hcmtldERhdGFCeVRpY2tlclRodW5rKHRpY2tlcikpO1xuICAgICAgY29uc3QgY2hhcnREYXRhID0gdW53cmFwUmVzdWx0KHJlc3BvbnNlKTtcbiAgICAgIGlmICghY2hhcnREYXRhLmxlbmd0aCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vIGNoYXJ0IGRhdGEgaXMgZmV0Y2hlZCcpO1xuICAgICAgfVxuICAgICAgY29uc3QgeyBzeW1ib2wgfSA9IGNoYXJ0RGF0YVswXS5tZXRhO1xuICAgICAgZGlzcGF0Y2gocGFyc2VNYXJrZXRDbG9zZURhdGEoY2hhcnREYXRhWzBdKSk7XG4gICAgICBkaXNwYXRjaChhZGRHcmFwaERpc3BsYXlPcHRpb24oc3ltYm9sKSk7XG4gICAgICBkaXNwYXRjaChhZGRBbGxpb0FsbG9jYXRpb25Bc3NldChzeW1ib2wpKTtcbiAgICAgIGRpc3BhdGNoKGNoYW5nZVRpY2tlcignJykpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBoYW5kbGVHZW5lcmF0ZUdyYXBoVHJpZ2dlciA9IGFzeW5jIChcbiAgICBldmVudDogRm9ybUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+IHwgRm9ybUV2ZW50PEhUTUxGb3JtRWxlbWVudD5cbiAgKSA9PiB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBkaXNwYXRjaChnZW5lcmF0ZU1hcmtldEdyYXBoRGF0YSgpKTtcbiAgICBkaXNwYXRjaChnZW5lcmF0ZUNzdlVybFRocnVuaygpKTtcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8Zm9ybSBvblN1Ym1pdD17aGFuZGxlVGlja2VyQWRkfT5cbiAgICAgICAgPGxhYmVsPlxuICAgICAgICAgIFRpY2tlciB0byBhZGQ6XG4gICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICBuYW1lPVwidGlja2VyXCJcbiAgICAgICAgICAgIHZhbHVlPXt0aWNrZXJ9XG4gICAgICAgICAgICBvbkNoYW5nZT17KGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgIGRpc3BhdGNoKGNoYW5nZVRpY2tlcihldmVudC50YXJnZXQudmFsdWUpKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJzdWJtaXRcIiB2YWx1ZT1cIkFkZFwiIG9uU3VibWl0PXtoYW5kbGVUaWNrZXJBZGR9IC8+XG4gICAgICAgIHt5YWhvb0ZpbmFuY2VEYXRhTG9hZGluZyAmJiA8cD5sb2FkaW5nPC9wPn1cbiAgICAgICAge3lhaG9vRmluYW5jZURhdGFFcnJvck1lc3NhZ2UgJiYgPHA+e3lhaG9vRmluYW5jZURhdGFFcnJvck1lc3NhZ2V9PC9wPn1cbiAgICAgIDwvZm9ybT5cbiAgICAgIDxmb3JtIG9uU3VibWl0PXtoYW5kbGVHZW5lcmF0ZUdyYXBoVHJpZ2dlcn0+XG4gICAgICAgIDxsYWJlbD5cbiAgICAgICAgICBJbml0aWFsIEZ1bmQ6XG4gICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICB0eXBlPVwibnVtYmVyXCJcbiAgICAgICAgICAgIG5hbWU9XCJpbml0aWFsRnVuZFwiXG4gICAgICAgICAgICB2YWx1ZT17aW5pdGlhbEZ1bmR9XG4gICAgICAgICAgICBvbkNoYW5nZT17KGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgIGRpc3BhdGNoKGNoYW5nZUluaXRpYWxGdW5kKHBhcnNlSW50KGV2ZW50LnRhcmdldC52YWx1ZSwgMTApKSk7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDxiciAvPlxuICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgSW5pdGlhbCBEYXRlOlxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgbmFtZT1cImluaXRpYWxEYXRlXCJcbiAgICAgICAgICAgIHZhbHVlPXtpbml0aWFsRGF0ZX1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXsoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgZGlzcGF0Y2goY2hhbmdlSW5pdGlhbERhdGUoZXZlbnQudGFyZ2V0LnZhbHVlKSk7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDxsYWJlbD5cbiAgICAgICAgICBGaW5hbCBEYXRlOlxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgbmFtZT1cImZpbmFsRGF0ZVwiXG4gICAgICAgICAgICB2YWx1ZT17ZmluYWxEYXRlfVxuICAgICAgICAgICAgb25DaGFuZ2U9eyhldmVudCkgPT4ge1xuICAgICAgICAgICAgICBkaXNwYXRjaChjaGFuZ2VGaW5hbERhdGUoZXZlbnQudGFyZ2V0LnZhbHVlKSk7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDxiciAvPlxuICAgICAgICB7Z3JhcGhPcHRpb25BcnJheS5tYXAoKGdyYXBoT3B0aW9uKSA9PiB7XG4gICAgICAgICAgY29uc3QgeyBhc3NldFR5cGUgfSA9IGdyYXBoT3B0aW9uO1xuICAgICAgICAgIGNvbnN0IGFsbGlvQWxsb2NhdGlvbiA9IGFsbGlvQWxsb2NhdGlvbkVudGl0aWVzW2Fzc2V0VHlwZV07XG4gICAgICAgICAgY29uc3QgZ3JhcGhPcHRpb25JZCA9IGAke2Fzc2V0VHlwZX0tZ3JhcGgtb3B0aW9uYDtcbiAgICAgICAgICBjb25zdCBzaG93SWQgPSBgJHthc3NldFR5cGV9LXNob3dgO1xuICAgICAgICAgIGNvbnN0IGFsbGlvQWxsb2NhdGlvbklkID0gYCR7YXNzZXRUeXBlfS1hbGxpby1hbGxvY2F0aW9uYDtcbiAgICAgICAgICBjb25zdCBudW1lcmF0b3JJZCA9IGAke2Fzc2V0VHlwZX0tbnVtZXJhdG9yYDtcbiAgICAgICAgICBjb25zdCBkZW5vbWluYXRvcklkID0gYCR7YXNzZXRUeXBlfS1kZW5vbWluYXRvcmA7XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYga2V5PXtncmFwaE9wdGlvbklkfSBjc3M9e2dyYXBoT3B0aW9uRGl2U3R5bGVzfT5cbiAgICAgICAgICAgICAgPGRpdj57YXNzZXRUeXBlfTwvZGl2PlxuICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICAgICAgICAgIGlkPXtzaG93SWR9XG4gICAgICAgICAgICAgICAgbmFtZT17c2hvd0lkfVxuICAgICAgICAgICAgICAgIGNoZWNrZWQ9e2dyYXBoT3B0aW9uLmRhdGEuc2hvd31cbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICBkaXNwYXRjaChcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlR3JhcGhEaXNwbGF5T3B0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgICBhc3NldFR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgc2hvdzogZXZlbnQudGFyZ2V0LmNoZWNrZWQsXG4gICAgICAgICAgICAgICAgICAgICAgY29sb3I6IGdyYXBoT3B0aW9uLmRhdGEuY29sb3IsXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPXtzaG93SWR9PnNob3c8L2xhYmVsPlxuICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgeyFncmFwaE9wdGlvbi5kYXRhLmVkaXRDb2xvciAmJiAoXG4gICAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgICAgY3NzPXtbXG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvblN0eWxlcyxcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uQmFja2dyb3VuZENvbG9yKHtcbiAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogZ3JhcGhPcHRpb24uZGF0YS5jb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogIWdyYXBoT3B0aW9uLmRhdGEuc2hvdyxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICBdfVxuICAgICAgICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgICAgICBkaXNhYmxlZD17IWdyYXBoT3B0aW9uLmRhdGEuc2hvd31cbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2godG9nZ2xlRWRpdENvbG9yKGFzc2V0VHlwZSkpO1xuICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICBjb2xvclxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICB7Z3JhcGhPcHRpb24uZGF0YS5lZGl0Q29sb3IgJiYgKFxuICAgICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIGNzcz17W1xuICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvblN0eWxlcyxcbiAgICAgICAgICAgICAgICAgICAgICBidXR0b25CYWNrZ3JvdW5kQ29sb3IoeyBjb2xvcjogZ3JhcGhPcHRpb24uZGF0YS5jb2xvciB9KSxcbiAgICAgICAgICAgICAgICAgICAgXX1cbiAgICAgICAgICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaCh0b2dnbGVFZGl0Q29sb3IoYXNzZXRUeXBlKSk7XG4gICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIGRvbmVcbiAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgPFNrZXRjaFBpY2tlclxuICAgICAgICAgICAgICAgICAgICBjb2xvcj17Z3JhcGhPcHRpb24uZGF0YS5jb2xvcn1cbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2VDb21wbGV0ZT17KGNvbG9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVHcmFwaERpc3BsYXlPcHRpb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NldFR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IGdyYXBoT3B0aW9uLmRhdGEuc2hvdyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IGNvbG9yLmhleCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC8+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIHthbGxpb0FsbG9jYXRpb24gJiYgKFxuICAgICAgICAgICAgICAgIDxGcmFnbWVudCBrZXk9e2FsbGlvQWxsb2NhdGlvbklkfT5cbiAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgICAgICAgICBBbGxpbyBBbGxvY2F0aW9uOlxuICAgICAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgICAgICAgICAgaWQ9e251bWVyYXRvcklkfVxuICAgICAgICAgICAgICAgICAgICAgIG5hbWU9e251bWVyYXRvcklkfVxuICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXthbGxpb0FsbG9jYXRpb24uZGF0YS5udW1lcmF0b3J9XG4gICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZUFsbGlvQWxsb2NhdGlvblByb3BvcnRpb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzc2V0VHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1lcmF0b3I6IGV2ZW50LnRhcmdldC52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZW5vbWluYXRvcjogYWxsaW9BbGxvY2F0aW9uLmRhdGEuZGVub21pbmF0b3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIC9cbiAgICAgICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICAgICAgICAgIGlkPXtkZW5vbWluYXRvcklkfVxuICAgICAgICAgICAgICAgICAgICAgIG5hbWU9e2Rlbm9taW5hdG9ySWR9XG4gICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2FsbGlvQWxsb2NhdGlvbi5kYXRhLmRlbm9taW5hdG9yfVxuICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVBbGxpb0FsbG9jYXRpb25Qcm9wb3J0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NldFR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtZXJhdG9yOiBhbGxpb0FsbG9jYXRpb24uZGF0YS5udW1lcmF0b3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVub21pbmF0b3I6IGV2ZW50LnRhcmdldC52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgPC9GcmFnbWVudD5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICk7XG4gICAgICAgIH0pfVxuICAgICAgICA8YnIgLz5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgY3NzPXtidXR0b25TdHlsZXN9XG4gICAgICAgICAgdHlwZT1cInN1Ym1pdFwiXG4gICAgICAgICAgdmFsdWU9XCJHZW5lcmF0ZSBHcnBhaFwiXG4gICAgICAgICAgb25TdWJtaXQ9e2hhbmRsZUdlbmVyYXRlR3JhcGhUcmlnZ2VyfVxuICAgICAgICAvPlxuICAgICAgPC9mb3JtPlxuICAgICAgPER5bmFtaWNHcmFwaCBkYXRhPXttYXJrZXRHcmFwaERhdGFBcnJheX0gY29sb3JzPXtjb2xvcnN9IC8+XG4gICAgICB7Y3N2VXJsICYmIChcbiAgICAgICAgPGEgY3NzPXtkb3dubG9hZExpbmtTdHlsZXN9IGRvd25sb2FkPVwiYXNzZXREYXRhLmNzdlwiIGhyZWY9e2NzdlVybH0+XG4gICAgICAgICAgRG93bmxvYWQgQ1NWXG4gICAgICAgIDwvYT5cbiAgICAgICl9XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBNYXJrZXRHcmFwaDtcbiJdfQ== */\");\n\nvar buttonBackgroundColor = function buttonBackgroundColor(_ref) {\n  var color = _ref.color,\n      disabled = _ref.disabled;\n  return /*#__PURE__*/Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__[\"css\"])(\"border-color:\", color, \";border-radius:\", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(1), \";padding:\", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(2), \";margin:0;&:hover{background-color:\", disabled ? 'initial' : color, \";\", disabled ? 'color: lightgray' : '', \";box-shadow:initial;}&:active{background-color:white;}\" + (false ? undefined : \";label:buttonBackgroundColor;\"), false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n};\n\nvar graphOptionDivStyles = /*#__PURE__*/Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__[\"css\"])(\"display:flex;flex-direction:column;max-width:\", Object(utils_styles_rem__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(20), \";&.*{display:block;}\" + (false ? undefined : \";label:graphOptionDivStyles;\"), false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n\nvar _rawYahooFinanceChart = _rawYahooFinanceChartDataEntityAdapter__WEBPACK_IMPORTED_MODULE_17__[\"default\"].getSelectors(_marketGraphSelectors__WEBPACK_IMPORTED_MODULE_15__[\"globalSelectRawYahooFinanceData\"]),\n    globalSelectRawYahooFinanceEntities = _rawYahooFinanceChart.selectEntities;\n\nvar _assetDataEntityAdapt = _assetDataEntityAdapter__WEBPACK_IMPORTED_MODULE_12__[\"default\"].getSelectors(_marketGraphSelectors__WEBPACK_IMPORTED_MODULE_15__[\"globalSelectMarketGraphDisplayOptions\"]),\n    globalSelectMarketGraphDisplayOptionArray = _assetDataEntityAdapt.selectAll;\n\nvar _assetDataEntityAdapt2 = _assetDataEntityAdapter__WEBPACK_IMPORTED_MODULE_12__[\"default\"].getSelectors(_marketGraphSelectors__WEBPACK_IMPORTED_MODULE_15__[\"globalSelectAllioAllocation\"]),\n    globalSelectAllioAllocationEntities = _assetDataEntityAdapt2.selectEntities;\n\nvar _datePriceDataEntityA = _datePriceDataEntityAdapter__WEBPACK_IMPORTED_MODULE_18__[\"default\"].getSelectors(_marketGraphSelectors__WEBPACK_IMPORTED_MODULE_15__[\"globalSelectMarketGraphData\"]),\n    globalSelectMarketGraphDataArray = _datePriceDataEntityA.selectAll;\n\nvar DynamicGraph = next_dynamic__WEBPACK_IMPORTED_MODULE_7___default()(_c = function _c() {\n  return __webpack_require__.e(/*! import() */ 1).then(__webpack_require__.bind(null, /*! ./Graph */ \"./src/features/marketGraph/Graph.tsx\"));\n}, {\n  ssr: false,\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [/*require.resolve*/(/*! ./Graph */ \"./src/features/marketGraph/Graph.tsx\")];\n    },\n    modules: ['./Graph']\n  }\n});\n_c2 = DynamicGraph;\n\nvar MarketGraph = function MarketGraph() {\n  _s();\n\n  var dispatch = Object(react_redux__WEBPACK_IMPORTED_MODULE_6__[\"useDispatch\"])();\n  var yahooFinanceDataLoading = Object(react_redux__WEBPACK_IMPORTED_MODULE_6__[\"useSelector\"])(_marketGraphSelectors__WEBPACK_IMPORTED_MODULE_15__[\"globalSelectYahooFinanceDataLoading\"]);\n  var yahooFinanceDataErrorMessage = Object(react_redux__WEBPACK_IMPORTED_MODULE_6__[\"useSelector\"])(_marketGraphSelectors__WEBPACK_IMPORTED_MODULE_15__[\"globalSelectYahooFinanceDataErrorMessage\"]);\n  var ticker = Object(react_redux__WEBPACK_IMPORTED_MODULE_6__[\"useSelector\"])(_marketGraphSelectors__WEBPACK_IMPORTED_MODULE_15__[\"globalSelectMarketGraphTicker\"]);\n  var initialDate = Object(react_redux__WEBPACK_IMPORTED_MODULE_6__[\"useSelector\"])(_marketGraphSelectors__WEBPACK_IMPORTED_MODULE_15__[\"globalSelectMarketGraphInitialDate\"]);\n  var finalDate = Object(react_redux__WEBPACK_IMPORTED_MODULE_6__[\"useSelector\"])(_marketGraphSelectors__WEBPACK_IMPORTED_MODULE_15__[\"globalSelectMarketGraphFinalDate\"]);\n  var initialFund = Object(react_redux__WEBPACK_IMPORTED_MODULE_6__[\"useSelector\"])(_marketGraphSelectors__WEBPACK_IMPORTED_MODULE_15__[\"globalSelectMarketGraphInitialFund\"]);\n  var rawYahooFinanceEntities = Object(react_redux__WEBPACK_IMPORTED_MODULE_6__[\"useSelector\"])(globalSelectRawYahooFinanceEntities);\n  var graphOptionArray = Object(react_redux__WEBPACK_IMPORTED_MODULE_6__[\"useSelector\"])(globalSelectMarketGraphDisplayOptionArray);\n  var colors = graphOptionArray.reduce(function (accu, graphOption) {\n    return _objectSpread(_objectSpread({}, accu), {}, Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, graphOption.assetType, graphOption.data.color));\n  }, {});\n  var allioAllocationEntities = Object(react_redux__WEBPACK_IMPORTED_MODULE_6__[\"useSelector\"])(globalSelectAllioAllocationEntities);\n  var csvUrl = Object(react_redux__WEBPACK_IMPORTED_MODULE_6__[\"useSelector\"])(_marketGraphSelectors__WEBPACK_IMPORTED_MODULE_15__[\"globalSelectMarketGraphCsvUrl\"]);\n  var marketGraphDataArray = Object(react_redux__WEBPACK_IMPORTED_MODULE_6__[\"useSelector\"])(globalSelectMarketGraphDataArray);\n\n  var handleTickerAdd = /*#__PURE__*/function () {\n    var _ref2 = Object(_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee(event) {\n      var response, chartData, symbol;\n      return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              event.preventDefault();\n\n              if (!(yahooFinanceDataLoading || rawYahooFinanceEntities[ticker])) {\n                _context.next = 3;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 3:\n              _context.prev = 3;\n              _context.next = 6;\n              return dispatch(Object(_fetchMarketDataByTickerThunk__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(ticker));\n\n            case 6:\n              response = _context.sent;\n              chartData = Object(_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_4__[\"unwrapResult\"])(response);\n\n              if (chartData.length) {\n                _context.next = 10;\n                break;\n              }\n\n              throw new Error('no chart data is fetched');\n\n            case 10:\n              symbol = chartData[0].meta.symbol;\n              dispatch(Object(_marketGraphSlice__WEBPACK_IMPORTED_MODULE_16__[\"parseMarketCloseData\"])(chartData[0]));\n              dispatch(Object(_marketGraphSlice__WEBPACK_IMPORTED_MODULE_16__[\"addGraphDisplayOption\"])(symbol));\n              dispatch(Object(_marketGraphSlice__WEBPACK_IMPORTED_MODULE_16__[\"addAllioAllocationAsset\"])(symbol));\n              dispatch(Object(_marketGraphSlice__WEBPACK_IMPORTED_MODULE_16__[\"changeTicker\"])(''));\n              _context.next = 20;\n              break;\n\n            case 17:\n              _context.prev = 17;\n              _context.t0 = _context[\"catch\"](3);\n              console.error(_context.t0);\n\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 17]]);\n    }));\n\n    return function handleTickerAdd(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handleGenerateGraphTrigger = /*#__PURE__*/function () {\n    var _ref3 = Object(_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee2(event) {\n      return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              event.preventDefault();\n              dispatch(Object(_marketGraphSlice__WEBPACK_IMPORTED_MODULE_16__[\"generateMarketGraphData\"])());\n              dispatch(Object(_generateCsvUrlThrunk__WEBPACK_IMPORTED_MODULE_14__[\"default\"])());\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handleGenerateGraphTrigger(_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"div\", {\n    children: [Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"form\", {\n      onSubmit: handleTickerAdd,\n      children: [Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"label\", {\n        children: [\"Ticker to add:\", Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"input\", {\n          type: \"text\",\n          name: \"ticker\",\n          value: ticker,\n          onChange: function onChange(event) {\n            dispatch(Object(_marketGraphSlice__WEBPACK_IMPORTED_MODULE_16__[\"changeTicker\"])(event.target.value));\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, _this), Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"input\", {\n        type: \"submit\",\n        value: \"Add\",\n        onSubmit: handleTickerAdd\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, _this), yahooFinanceDataLoading && Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"p\", {\n        children: \"loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 37\n      }, _this), yahooFinanceDataErrorMessage && Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"p\", {\n        children: yahooFinanceDataErrorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 42\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, _this), Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"form\", {\n      onSubmit: handleGenerateGraphTrigger,\n      children: [Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"label\", {\n        children: [\"Initial Fund:\", Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"input\", {\n          type: \"number\",\n          name: \"initialFund\",\n          value: initialFund,\n          onChange: function onChange(event) {\n            dispatch(Object(_marketGraphSlice__WEBPACK_IMPORTED_MODULE_16__[\"changeInitialFund\"])(parseInt(event.target.value, 10)));\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, _this), Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, _this), Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"label\", {\n        children: [\"Initial Date:\", Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"input\", {\n          type: \"text\",\n          name: \"initialDate\",\n          value: initialDate,\n          onChange: function onChange(event) {\n            dispatch(Object(_marketGraphSlice__WEBPACK_IMPORTED_MODULE_16__[\"changeInitialDate\"])(event.target.value));\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, _this), Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"label\", {\n        children: [\"Final Date:\", Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"input\", {\n          type: \"text\",\n          name: \"finalDate\",\n          value: finalDate,\n          onChange: function onChange(event) {\n            dispatch(Object(_marketGraphSlice__WEBPACK_IMPORTED_MODULE_16__[\"changeFinalDate\"])(event.target.value));\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, _this), Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, _this), graphOptionArray.map(function (graphOption) {\n        var assetType = graphOption.assetType;\n        var allioAllocation = allioAllocationEntities[assetType];\n        var graphOptionId = \"\".concat(assetType, \"-graph-option\");\n        var showId = \"\".concat(assetType, \"-show\");\n        var allioAllocationId = \"\".concat(assetType, \"-allio-allocation\");\n        var numeratorId = \"\".concat(assetType, \"-numerator\");\n        var denominatorId = \"\".concat(assetType, \"-denominator\");\n        return Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"div\", {\n          css: graphOptionDivStyles,\n          children: [Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"div\", {\n            children: assetType\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 15\n          }, _this), Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"input\", {\n            type: \"checkbox\",\n            id: showId,\n            name: showId,\n            checked: graphOption.data.show,\n            onChange: function onChange(event) {\n              dispatch(Object(_marketGraphSlice__WEBPACK_IMPORTED_MODULE_16__[\"updateGraphDisplayOption\"])({\n                assetType: assetType,\n                show: event.target.checked,\n                color: graphOption.data.color\n              }));\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 15\n          }, _this), Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"label\", {\n            htmlFor: showId,\n            children: \"show\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 15\n          }, _this), Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 15\n          }, _this), !graphOption.data.editColor && Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"button\", {\n            css: [buttonStyles, buttonBackgroundColor({\n              color: graphOption.data.color,\n              disabled: !graphOption.data.show\n            }), false ? undefined : \";label:MarketGraph;\", false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2NsZmhoYy9zcmMvYWxsaW8vanMtZ2VuZXJhbC9mcm9udGVuZC9zcmMvZmVhdHVyZXMvbWFya2V0R3JhcGgvTWFya2V0R3JhcGgudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTJSa0IiLCJmaWxlIjoiL2hvbWUvY2xmaGhjL3NyYy9hbGxpby9qcy1nZW5lcmFsL2Zyb250ZW5kL3NyYy9mZWF0dXJlcy9tYXJrZXRHcmFwaC9NYXJrZXRHcmFwaC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1bndyYXBSZXN1bHQgfSBmcm9tICdAcmVkdXhqcy90b29sa2l0JztcbmltcG9ydCB7IEFwcERpc3BhdGNoIH0gZnJvbSAnZmVhdHVyZXMvcmVkdXgvc3RvcmUnO1xuaW1wb3J0IHsgRkMsIEZvcm1FdmVudCwgRnJhZ21lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgZHluYW1pYyBmcm9tICduZXh0L2R5bmFtaWMnO1xuaW1wb3J0IHsgU2tldGNoUGlja2VyIH0gZnJvbSAncmVhY3QtY29sb3InO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHJlbSBmcm9tICd1dGlscy9zdHlsZXMvcmVtJztcbmltcG9ydCB0cmFuc2l0aW9uIGZyb20gJ3V0aWxzL3N0eWxlcy90cmFuc2l0aW9uJztcbmltcG9ydCBhc3NldERhdGFFbnRpdHlBZGFwdGVyIGZyb20gJy4vYXNzZXREYXRhRW50aXR5QWRhcHRlcic7XG5pbXBvcnQgZmV0Y2hNYXJrZXREYXRhQnlUaWNrZXJUaHVuayBmcm9tICcuL2ZldGNoTWFya2V0RGF0YUJ5VGlja2VyVGh1bmsnO1xuaW1wb3J0IGdlbmVyYXRlQ3N2VXJsVGhydW5rIGZyb20gJy4vZ2VuZXJhdGVDc3ZVcmxUaHJ1bmsnO1xuaW1wb3J0IHtcbiAgZ2xvYmFsU2VsZWN0WWFob29GaW5hbmNlRGF0YUxvYWRpbmcsXG4gIGdsb2JhbFNlbGVjdFlhaG9vRmluYW5jZURhdGFFcnJvck1lc3NhZ2UsXG4gIGdsb2JhbFNlbGVjdE1hcmtldEdyYXBoVGlja2VyLFxuICBnbG9iYWxTZWxlY3RNYXJrZXRHcmFwaEluaXRpYWxEYXRlLFxuICBnbG9iYWxTZWxlY3RNYXJrZXRHcmFwaEluaXRpYWxGdW5kLFxuICBnbG9iYWxTZWxlY3RSYXdZYWhvb0ZpbmFuY2VEYXRhLFxuICBnbG9iYWxTZWxlY3RNYXJrZXRHcmFwaERpc3BsYXlPcHRpb25zLFxuICBnbG9iYWxTZWxlY3RNYXJrZXRHcmFwaEZpbmFsRGF0ZSxcbiAgZ2xvYmFsU2VsZWN0QWxsaW9BbGxvY2F0aW9uLFxuICBnbG9iYWxTZWxlY3RNYXJrZXRHcmFwaENzdlVybCxcbiAgZ2xvYmFsU2VsZWN0TWFya2V0R3JhcGhEYXRhLFxufSBmcm9tICcuL21hcmtldEdyYXBoU2VsZWN0b3JzJztcbmltcG9ydCB7XG4gIGFkZEdyYXBoRGlzcGxheU9wdGlvbixcbiAgY2hhbmdlSW5pdGlhbERhdGUsXG4gIGNoYW5nZUZpbmFsRGF0ZSxcbiAgY2hhbmdlSW5pdGlhbEZ1bmQsXG4gIGNoYW5nZVRpY2tlcixcbiAgcGFyc2VNYXJrZXRDbG9zZURhdGEsXG4gIHVwZGF0ZUdyYXBoRGlzcGxheU9wdGlvbixcbiAgdXBkYXRlQWxsaW9BbGxvY2F0aW9uUHJvcG9ydGlvbixcbiAgYWRkQWxsaW9BbGxvY2F0aW9uQXNzZXQsXG4gIGdlbmVyYXRlTWFya2V0R3JhcGhEYXRhLFxuICB0b2dnbGVFZGl0Q29sb3IsXG59IGZyb20gJy4vbWFya2V0R3JhcGhTbGljZSc7XG5pbXBvcnQgcmF3WWFob29GaW5hbmNlQ2hhcnREYXRhRW50aXR5QWRhcHRlciBmcm9tICcuL3Jhd1lhaG9vRmluYW5jZUNoYXJ0RGF0YUVudGl0eUFkYXB0ZXInO1xuaW1wb3J0IGRhdGVQcmljZURhdGFFbnRpdHlBZGFwdGVyIGZyb20gJy4vZGF0ZVByaWNlRGF0YUVudGl0eUFkYXB0ZXInO1xuXG5jb25zdCBidXR0b25TdHlsZXMgPSBjc3NgXG4gIHBhZGRpbmc6ICR7cmVtKDQpfSAke3JlbSg4KX07XG4gIGJvcmRlci1yYWRpdXM6ICR7cmVtKDEwKX07XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgYm9yZGVyOiAke3JlbSgyKX0gc29saWQgIzRjYWY1MDtcbiAgJHt0cmFuc2l0aW9uKDEwMCkoJ2FsbCcpfTtcbiAgZm9udC1zaXplOiAke3JlbSgxNil9O1xuICBtYXJnaW46ICR7cmVtKDEwKX0gJHtyZW0oMjApfTtcbiAgb3V0bGluZTogTm9uZTtcblxuICAmOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNGNhZjUwO1xuICAgIGNvbG9yOiB3aGl0ZTtcbiAgICBib3gtc2hhZG93OiAwICR7cmVtKDEyKX0gJHtyZW0oMTYpfSAwIHJnYmEoMCwgMCwgMCwgMC4yNCksXG4gICAgICAwICR7cmVtKDE3KX0gJHtyZW0oNTApfSAwIHJnYmEoMCwgMCwgMCwgMC4xOSk7XG4gIH1cblxuICAmOmFjdGl2ZSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gICAgY29sb3I6IGJsYWNrO1xuICAgIGJveC1zaGFkb3c6IDAgJHtyZW0oMyl9ICR7cmVtKDQpfSAwIHJnYmEoMCwgMCwgMCwgMC4yNCksXG4gICAgICAwICR7cmVtKDQpfSAke3JlbSgxMyl9IDAgcmdiYSgwLCAwLCAwLCAwLjE5KTtcbiAgfVxuYDtcblxuY29uc3QgZG93bmxvYWRMaW5rU3R5bGVzID0gY3NzYFxuICBkaXNwbGF5OiBibG9jaztcbiAgbWF4LXdpZHRoOiAke3JlbSgxNTApfTtcbiAgYm9yZGVyOiAke3JlbSgyKX0gZG90dGVkIGJsYWNrO1xuICBwYWRkaW5nOiAke3JlbSg0KX0gJHtyZW0oOCl9O1xuICBmb250LXNpemU6ICR7cmVtKDE2KX07XG4gIG1hcmdpbjogJHtyZW0oMTApfSBhdXRvO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5cbiAgJjpsaW5rIHtcbiAgICBjb2xvcjogYmxhY2s7XG4gIH1cbiAgJjphY3RpdmUsXG4gICY6aG92ZXIge1xuICAgIGNvbG9yOiBibHVlO1xuICB9XG5gO1xuXG5jb25zdCBidXR0b25CYWNrZ3JvdW5kQ29sb3IgPSAoe1xuICBjb2xvcixcbiAgZGlzYWJsZWQsXG59OiB7XG4gIGNvbG9yOiBzdHJpbmc7XG4gIGRpc2FibGVkPzogYm9vbGVhbjtcbn0pID0+IGNzc2BcbiAgYm9yZGVyLWNvbG9yOiAke2NvbG9yfTtcbiAgYm9yZGVyLXJhZGl1czogJHtyZW0oMSl9O1xuICBwYWRkaW5nOiAke3JlbSgyKX07XG4gIG1hcmdpbjogMDtcblxuICAmOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2Rpc2FibGVkID8gJ2luaXRpYWwnIDogY29sb3J9O1xuICAgICR7ZGlzYWJsZWQgPyAnY29sb3I6IGxpZ2h0Z3JheScgOiAnJ307XG4gICAgYm94LXNoYWRvdzogaW5pdGlhbDtcbiAgfVxuXG4gICY6YWN0aXZlIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgfVxuYDtcblxuY29uc3QgZ3JhcGhPcHRpb25EaXZTdHlsZXMgPSBjc3NgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIG1heC13aWR0aDogJHtyZW0oMjApfTtcbiAgJi4qIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgfVxuYDtcblxuY29uc3Qge1xuICBzZWxlY3RFbnRpdGllczogZ2xvYmFsU2VsZWN0UmF3WWFob29GaW5hbmNlRW50aXRpZXMsXG59ID0gcmF3WWFob29GaW5hbmNlQ2hhcnREYXRhRW50aXR5QWRhcHRlci5nZXRTZWxlY3RvcnMoXG4gIGdsb2JhbFNlbGVjdFJhd1lhaG9vRmluYW5jZURhdGFcbik7XG5cbmNvbnN0IHtcbiAgc2VsZWN0QWxsOiBnbG9iYWxTZWxlY3RNYXJrZXRHcmFwaERpc3BsYXlPcHRpb25BcnJheSxcbn0gPSBhc3NldERhdGFFbnRpdHlBZGFwdGVyLmdldFNlbGVjdG9ycyhnbG9iYWxTZWxlY3RNYXJrZXRHcmFwaERpc3BsYXlPcHRpb25zKTtcblxuY29uc3Qge1xuICBzZWxlY3RFbnRpdGllczogZ2xvYmFsU2VsZWN0QWxsaW9BbGxvY2F0aW9uRW50aXRpZXMsXG59ID0gYXNzZXREYXRhRW50aXR5QWRhcHRlci5nZXRTZWxlY3RvcnMoZ2xvYmFsU2VsZWN0QWxsaW9BbGxvY2F0aW9uKTtcblxuY29uc3Qge1xuICBzZWxlY3RBbGw6IGdsb2JhbFNlbGVjdE1hcmtldEdyYXBoRGF0YUFycmF5LFxufSA9IGRhdGVQcmljZURhdGFFbnRpdHlBZGFwdGVyLmdldFNlbGVjdG9ycyhnbG9iYWxTZWxlY3RNYXJrZXRHcmFwaERhdGEpO1xuXG5jb25zdCBEeW5hbWljR3JhcGggPSBkeW5hbWljKCgpID0+IGltcG9ydCgnLi9HcmFwaCcpLCB7IHNzcjogZmFsc2UgfSk7XG5cbmNvbnN0IE1hcmtldEdyYXBoOiBGQyA9ICgpID0+IHtcbiAgY29uc3QgZGlzcGF0Y2g6IEFwcERpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcbiAgY29uc3QgeWFob29GaW5hbmNlRGF0YUxvYWRpbmcgPSB1c2VTZWxlY3RvcihcbiAgICBnbG9iYWxTZWxlY3RZYWhvb0ZpbmFuY2VEYXRhTG9hZGluZ1xuICApO1xuICBjb25zdCB5YWhvb0ZpbmFuY2VEYXRhRXJyb3JNZXNzYWdlID0gdXNlU2VsZWN0b3IoXG4gICAgZ2xvYmFsU2VsZWN0WWFob29GaW5hbmNlRGF0YUVycm9yTWVzc2FnZVxuICApO1xuICBjb25zdCB0aWNrZXIgPSB1c2VTZWxlY3RvcihnbG9iYWxTZWxlY3RNYXJrZXRHcmFwaFRpY2tlcik7XG4gIGNvbnN0IGluaXRpYWxEYXRlID0gdXNlU2VsZWN0b3IoZ2xvYmFsU2VsZWN0TWFya2V0R3JhcGhJbml0aWFsRGF0ZSk7XG4gIGNvbnN0IGZpbmFsRGF0ZSA9IHVzZVNlbGVjdG9yKGdsb2JhbFNlbGVjdE1hcmtldEdyYXBoRmluYWxEYXRlKTtcbiAgY29uc3QgaW5pdGlhbEZ1bmQgPSB1c2VTZWxlY3RvcihnbG9iYWxTZWxlY3RNYXJrZXRHcmFwaEluaXRpYWxGdW5kKTtcbiAgY29uc3QgcmF3WWFob29GaW5hbmNlRW50aXRpZXMgPSB1c2VTZWxlY3RvcihcbiAgICBnbG9iYWxTZWxlY3RSYXdZYWhvb0ZpbmFuY2VFbnRpdGllc1xuICApO1xuICBjb25zdCBncmFwaE9wdGlvbkFycmF5ID0gdXNlU2VsZWN0b3IoXG4gICAgZ2xvYmFsU2VsZWN0TWFya2V0R3JhcGhEaXNwbGF5T3B0aW9uQXJyYXlcbiAgKTtcbiAgY29uc3QgY29sb3JzID0gZ3JhcGhPcHRpb25BcnJheS5yZWR1Y2U8UmVjb3JkPHN0cmluZywgc3RyaW5nPj4oXG4gICAgKGFjY3UsIGdyYXBoT3B0aW9uKSA9PiAoe1xuICAgICAgLi4uYWNjdSxcbiAgICAgIFtncmFwaE9wdGlvbi5hc3NldFR5cGVdOiBncmFwaE9wdGlvbi5kYXRhLmNvbG9yLFxuICAgIH0pLFxuICAgIHt9XG4gICk7XG4gIGNvbnN0IGFsbGlvQWxsb2NhdGlvbkVudGl0aWVzID0gdXNlU2VsZWN0b3IoXG4gICAgZ2xvYmFsU2VsZWN0QWxsaW9BbGxvY2F0aW9uRW50aXRpZXNcbiAgKTtcbiAgY29uc3QgY3N2VXJsID0gdXNlU2VsZWN0b3IoZ2xvYmFsU2VsZWN0TWFya2V0R3JhcGhDc3ZVcmwpO1xuICBjb25zdCBtYXJrZXRHcmFwaERhdGFBcnJheSA9IHVzZVNlbGVjdG9yKGdsb2JhbFNlbGVjdE1hcmtldEdyYXBoRGF0YUFycmF5KTtcblxuICBjb25zdCBoYW5kbGVUaWNrZXJBZGQgPSBhc3luYyAoXG4gICAgZXZlbnQ6IEZvcm1FdmVudDxIVE1MSW5wdXRFbGVtZW50PiB8IEZvcm1FdmVudDxIVE1MRm9ybUVsZW1lbnQ+XG4gICkgPT4ge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBpZiAoeWFob29GaW5hbmNlRGF0YUxvYWRpbmcgfHwgcmF3WWFob29GaW5hbmNlRW50aXRpZXNbdGlja2VyXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBkaXNwYXRjaChmZXRjaE1hcmtldERhdGFCeVRpY2tlclRodW5rKHRpY2tlcikpO1xuICAgICAgY29uc3QgY2hhcnREYXRhID0gdW53cmFwUmVzdWx0KHJlc3BvbnNlKTtcbiAgICAgIGlmICghY2hhcnREYXRhLmxlbmd0aCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vIGNoYXJ0IGRhdGEgaXMgZmV0Y2hlZCcpO1xuICAgICAgfVxuICAgICAgY29uc3QgeyBzeW1ib2wgfSA9IGNoYXJ0RGF0YVswXS5tZXRhO1xuICAgICAgZGlzcGF0Y2gocGFyc2VNYXJrZXRDbG9zZURhdGEoY2hhcnREYXRhWzBdKSk7XG4gICAgICBkaXNwYXRjaChhZGRHcmFwaERpc3BsYXlPcHRpb24oc3ltYm9sKSk7XG4gICAgICBkaXNwYXRjaChhZGRBbGxpb0FsbG9jYXRpb25Bc3NldChzeW1ib2wpKTtcbiAgICAgIGRpc3BhdGNoKGNoYW5nZVRpY2tlcignJykpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBoYW5kbGVHZW5lcmF0ZUdyYXBoVHJpZ2dlciA9IGFzeW5jIChcbiAgICBldmVudDogRm9ybUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+IHwgRm9ybUV2ZW50PEhUTUxGb3JtRWxlbWVudD5cbiAgKSA9PiB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBkaXNwYXRjaChnZW5lcmF0ZU1hcmtldEdyYXBoRGF0YSgpKTtcbiAgICBkaXNwYXRjaChnZW5lcmF0ZUNzdlVybFRocnVuaygpKTtcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8Zm9ybSBvblN1Ym1pdD17aGFuZGxlVGlja2VyQWRkfT5cbiAgICAgICAgPGxhYmVsPlxuICAgICAgICAgIFRpY2tlciB0byBhZGQ6XG4gICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICBuYW1lPVwidGlja2VyXCJcbiAgICAgICAgICAgIHZhbHVlPXt0aWNrZXJ9XG4gICAgICAgICAgICBvbkNoYW5nZT17KGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgIGRpc3BhdGNoKGNoYW5nZVRpY2tlcihldmVudC50YXJnZXQudmFsdWUpKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJzdWJtaXRcIiB2YWx1ZT1cIkFkZFwiIG9uU3VibWl0PXtoYW5kbGVUaWNrZXJBZGR9IC8+XG4gICAgICAgIHt5YWhvb0ZpbmFuY2VEYXRhTG9hZGluZyAmJiA8cD5sb2FkaW5nPC9wPn1cbiAgICAgICAge3lhaG9vRmluYW5jZURhdGFFcnJvck1lc3NhZ2UgJiYgPHA+e3lhaG9vRmluYW5jZURhdGFFcnJvck1lc3NhZ2V9PC9wPn1cbiAgICAgIDwvZm9ybT5cbiAgICAgIDxmb3JtIG9uU3VibWl0PXtoYW5kbGVHZW5lcmF0ZUdyYXBoVHJpZ2dlcn0+XG4gICAgICAgIDxsYWJlbD5cbiAgICAgICAgICBJbml0aWFsIEZ1bmQ6XG4gICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICB0eXBlPVwibnVtYmVyXCJcbiAgICAgICAgICAgIG5hbWU9XCJpbml0aWFsRnVuZFwiXG4gICAgICAgICAgICB2YWx1ZT17aW5pdGlhbEZ1bmR9XG4gICAgICAgICAgICBvbkNoYW5nZT17KGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgIGRpc3BhdGNoKGNoYW5nZUluaXRpYWxGdW5kKHBhcnNlSW50KGV2ZW50LnRhcmdldC52YWx1ZSwgMTApKSk7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDxiciAvPlxuICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgSW5pdGlhbCBEYXRlOlxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgbmFtZT1cImluaXRpYWxEYXRlXCJcbiAgICAgICAgICAgIHZhbHVlPXtpbml0aWFsRGF0ZX1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXsoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgZGlzcGF0Y2goY2hhbmdlSW5pdGlhbERhdGUoZXZlbnQudGFyZ2V0LnZhbHVlKSk7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDxsYWJlbD5cbiAgICAgICAgICBGaW5hbCBEYXRlOlxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgbmFtZT1cImZpbmFsRGF0ZVwiXG4gICAgICAgICAgICB2YWx1ZT17ZmluYWxEYXRlfVxuICAgICAgICAgICAgb25DaGFuZ2U9eyhldmVudCkgPT4ge1xuICAgICAgICAgICAgICBkaXNwYXRjaChjaGFuZ2VGaW5hbERhdGUoZXZlbnQudGFyZ2V0LnZhbHVlKSk7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDxiciAvPlxuICAgICAgICB7Z3JhcGhPcHRpb25BcnJheS5tYXAoKGdyYXBoT3B0aW9uKSA9PiB7XG4gICAgICAgICAgY29uc3QgeyBhc3NldFR5cGUgfSA9IGdyYXBoT3B0aW9uO1xuICAgICAgICAgIGNvbnN0IGFsbGlvQWxsb2NhdGlvbiA9IGFsbGlvQWxsb2NhdGlvbkVudGl0aWVzW2Fzc2V0VHlwZV07XG4gICAgICAgICAgY29uc3QgZ3JhcGhPcHRpb25JZCA9IGAke2Fzc2V0VHlwZX0tZ3JhcGgtb3B0aW9uYDtcbiAgICAgICAgICBjb25zdCBzaG93SWQgPSBgJHthc3NldFR5cGV9LXNob3dgO1xuICAgICAgICAgIGNvbnN0IGFsbGlvQWxsb2NhdGlvbklkID0gYCR7YXNzZXRUeXBlfS1hbGxpby1hbGxvY2F0aW9uYDtcbiAgICAgICAgICBjb25zdCBudW1lcmF0b3JJZCA9IGAke2Fzc2V0VHlwZX0tbnVtZXJhdG9yYDtcbiAgICAgICAgICBjb25zdCBkZW5vbWluYXRvcklkID0gYCR7YXNzZXRUeXBlfS1kZW5vbWluYXRvcmA7XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYga2V5PXtncmFwaE9wdGlvbklkfSBjc3M9e2dyYXBoT3B0aW9uRGl2U3R5bGVzfT5cbiAgICAgICAgICAgICAgPGRpdj57YXNzZXRUeXBlfTwvZGl2PlxuICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICAgICAgICAgIGlkPXtzaG93SWR9XG4gICAgICAgICAgICAgICAgbmFtZT17c2hvd0lkfVxuICAgICAgICAgICAgICAgIGNoZWNrZWQ9e2dyYXBoT3B0aW9uLmRhdGEuc2hvd31cbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICBkaXNwYXRjaChcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlR3JhcGhEaXNwbGF5T3B0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgICBhc3NldFR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgc2hvdzogZXZlbnQudGFyZ2V0LmNoZWNrZWQsXG4gICAgICAgICAgICAgICAgICAgICAgY29sb3I6IGdyYXBoT3B0aW9uLmRhdGEuY29sb3IsXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPXtzaG93SWR9PnNob3c8L2xhYmVsPlxuICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgeyFncmFwaE9wdGlvbi5kYXRhLmVkaXRDb2xvciAmJiAoXG4gICAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgICAgY3NzPXtbXG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvblN0eWxlcyxcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uQmFja2dyb3VuZENvbG9yKHtcbiAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogZ3JhcGhPcHRpb24uZGF0YS5jb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogIWdyYXBoT3B0aW9uLmRhdGEuc2hvdyxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICBdfVxuICAgICAgICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgICAgICBkaXNhYmxlZD17IWdyYXBoT3B0aW9uLmRhdGEuc2hvd31cbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2godG9nZ2xlRWRpdENvbG9yKGFzc2V0VHlwZSkpO1xuICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICBjb2xvclxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICB7Z3JhcGhPcHRpb24uZGF0YS5lZGl0Q29sb3IgJiYgKFxuICAgICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIGNzcz17W1xuICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvblN0eWxlcyxcbiAgICAgICAgICAgICAgICAgICAgICBidXR0b25CYWNrZ3JvdW5kQ29sb3IoeyBjb2xvcjogZ3JhcGhPcHRpb24uZGF0YS5jb2xvciB9KSxcbiAgICAgICAgICAgICAgICAgICAgXX1cbiAgICAgICAgICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaCh0b2dnbGVFZGl0Q29sb3IoYXNzZXRUeXBlKSk7XG4gICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIGRvbmVcbiAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgPFNrZXRjaFBpY2tlclxuICAgICAgICAgICAgICAgICAgICBjb2xvcj17Z3JhcGhPcHRpb24uZGF0YS5jb2xvcn1cbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2VDb21wbGV0ZT17KGNvbG9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVHcmFwaERpc3BsYXlPcHRpb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NldFR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IGdyYXBoT3B0aW9uLmRhdGEuc2hvdyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IGNvbG9yLmhleCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC8+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIHthbGxpb0FsbG9jYXRpb24gJiYgKFxuICAgICAgICAgICAgICAgIDxGcmFnbWVudCBrZXk9e2FsbGlvQWxsb2NhdGlvbklkfT5cbiAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgICAgICAgICBBbGxpbyBBbGxvY2F0aW9uOlxuICAgICAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgICAgICAgICAgaWQ9e251bWVyYXRvcklkfVxuICAgICAgICAgICAgICAgICAgICAgIG5hbWU9e251bWVyYXRvcklkfVxuICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXthbGxpb0FsbG9jYXRpb24uZGF0YS5udW1lcmF0b3J9XG4gICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZUFsbGlvQWxsb2NhdGlvblByb3BvcnRpb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzc2V0VHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1lcmF0b3I6IGV2ZW50LnRhcmdldC52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZW5vbWluYXRvcjogYWxsaW9BbGxvY2F0aW9uLmRhdGEuZGVub21pbmF0b3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIC9cbiAgICAgICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICAgICAgICAgIGlkPXtkZW5vbWluYXRvcklkfVxuICAgICAgICAgICAgICAgICAgICAgIG5hbWU9e2Rlbm9taW5hdG9ySWR9XG4gICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2FsbGlvQWxsb2NhdGlvbi5kYXRhLmRlbm9taW5hdG9yfVxuICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVBbGxpb0FsbG9jYXRpb25Qcm9wb3J0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NldFR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtZXJhdG9yOiBhbGxpb0FsbG9jYXRpb24uZGF0YS5udW1lcmF0b3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVub21pbmF0b3I6IGV2ZW50LnRhcmdldC52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgPC9GcmFnbWVudD5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICk7XG4gICAgICAgIH0pfVxuICAgICAgICA8YnIgLz5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgY3NzPXtidXR0b25TdHlsZXN9XG4gICAgICAgICAgdHlwZT1cInN1Ym1pdFwiXG4gICAgICAgICAgdmFsdWU9XCJHZW5lcmF0ZSBHcnBhaFwiXG4gICAgICAgICAgb25TdWJtaXQ9e2hhbmRsZUdlbmVyYXRlR3JhcGhUcmlnZ2VyfVxuICAgICAgICAvPlxuICAgICAgPC9mb3JtPlxuICAgICAgPER5bmFtaWNHcmFwaCBkYXRhPXttYXJrZXRHcmFwaERhdGFBcnJheX0gY29sb3JzPXtjb2xvcnN9IC8+XG4gICAgICB7Y3N2VXJsICYmIChcbiAgICAgICAgPGEgY3NzPXtkb3dubG9hZExpbmtTdHlsZXN9IGRvd25sb2FkPVwiYXNzZXREYXRhLmNzdlwiIGhyZWY9e2NzdlVybH0+XG4gICAgICAgICAgRG93bmxvYWQgQ1NWXG4gICAgICAgIDwvYT5cbiAgICAgICl9XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBNYXJrZXRHcmFwaDtcbiJdfQ== */\"],\n            type: \"button\",\n            disabled: !graphOption.data.show,\n            onClick: function onClick() {\n              dispatch(Object(_marketGraphSlice__WEBPACK_IMPORTED_MODULE_16__[\"toggleEditColor\"])(assetType));\n            },\n            children: \"color\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 17\n          }, _this), graphOption.data.editColor && Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"Fragment\"], {\n            children: [Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"button\", {\n              css: [buttonStyles, buttonBackgroundColor({\n                color: graphOption.data.color\n              }), false ? undefined : \";label:MarketGraph;\", false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"],\n              type: \"button\",\n              onClick: function onClick() {\n                dispatch(Object(_marketGraphSlice__WEBPACK_IMPORTED_MODULE_16__[\"toggleEditColor\"])(assetType));\n              },\n              children: \"done\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 19\n            }, _this), Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(react_color__WEBPACK_IMPORTED_MODULE_8__[\"SketchPicker\"], {\n              color: graphOption.data.color,\n              onChangeComplete: function onChangeComplete(color) {\n                dispatch(Object(_marketGraphSlice__WEBPACK_IMPORTED_MODULE_16__[\"updateGraphDisplayOption\"])({\n                  assetType: assetType,\n                  show: graphOption.data.show,\n                  color: color.hex\n                }));\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 19\n            }, _this)]\n          }, void 0, true), allioAllocation && Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(react__WEBPACK_IMPORTED_MODULE_5__[\"Fragment\"], {\n            children: [Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 330,\n              columnNumber: 19\n            }, _this), Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"label\", {\n              children: [\"Allio Allocation:\", Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"input\", {\n                type: \"text\",\n                id: numeratorId,\n                name: numeratorId,\n                value: allioAllocation.data.numerator,\n                onChange: function onChange(event) {\n                  dispatch(Object(_marketGraphSlice__WEBPACK_IMPORTED_MODULE_16__[\"updateAllioAllocationProportion\"])({\n                    assetType: assetType,\n                    numerator: event.target.value,\n                    denominator: allioAllocation.data.denominator\n                  }));\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 333,\n                columnNumber: 21\n              }, _this), \"/\", Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"input\", {\n                type: \"text\",\n                id: denominatorId,\n                name: denominatorId,\n                value: allioAllocation.data.denominator,\n                onChange: function onChange(event) {\n                  dispatch(Object(_marketGraphSlice__WEBPACK_IMPORTED_MODULE_16__[\"updateAllioAllocationProportion\"])({\n                    assetType: assetType,\n                    numerator: allioAllocation.data.numerator,\n                    denominator: event.target.value\n                  }));\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 349,\n                columnNumber: 21\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 331,\n              columnNumber: 19\n            }, _this)]\n          }, allioAllocationId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 17\n          }, _this)]\n        }, graphOptionId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 13\n        }, _this);\n      }), Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 9\n      }, _this), Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"input\", {\n        css: buttonStyles,\n        type: \"submit\",\n        value: \"Generate Grpah\",\n        onSubmit: handleGenerateGraphTrigger\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, _this), Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(DynamicGraph, {\n      data: marketGraphDataArray,\n      colors: colors\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 7\n    }, _this), csvUrl && Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__[\"jsxDEV\"])(\"a\", {\n      css: downloadLinkStyles,\n      download: \"assetData.csv\",\n      href: csvUrl,\n      children: \"Download CSV\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 9\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(MarketGraph, \"6WU+VP4ky7mTVcJ0FBjFsgruhJ8=\", false, function () {\n  return [react_redux__WEBPACK_IMPORTED_MODULE_6__[\"useDispatch\"], react_redux__WEBPACK_IMPORTED_MODULE_6__[\"useSelector\"], react_redux__WEBPACK_IMPORTED_MODULE_6__[\"useSelector\"], react_redux__WEBPACK_IMPORTED_MODULE_6__[\"useSelector\"], react_redux__WEBPACK_IMPORTED_MODULE_6__[\"useSelector\"], react_redux__WEBPACK_IMPORTED_MODULE_6__[\"useSelector\"], react_redux__WEBPACK_IMPORTED_MODULE_6__[\"useSelector\"], react_redux__WEBPACK_IMPORTED_MODULE_6__[\"useSelector\"], react_redux__WEBPACK_IMPORTED_MODULE_6__[\"useSelector\"], react_redux__WEBPACK_IMPORTED_MODULE_6__[\"useSelector\"], react_redux__WEBPACK_IMPORTED_MODULE_6__[\"useSelector\"], react_redux__WEBPACK_IMPORTED_MODULE_6__[\"useSelector\"]];\n});\n\n_c3 = MarketGraph;\n/* harmony default export */ __webpack_exports__[\"default\"] = (MarketGraph);\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"DynamicGraph$dynamic\");\n$RefreshReg$(_c2, \"DynamicGraph\");\n$RefreshReg$(_c3, \"MarketGraph\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/features/marketGraph/MarketGraph.tsx\n");

/***/ })

})