webpackHotUpdate_N_E("pages/market-graph",{

/***/ "./src/features/marketGraph/marketGraphSlice.ts":
/*!******************************************************!*\
  !*** ./src/features/marketGraph/marketGraphSlice.ts ***!
  \******************************************************/
/*! exports provided: default, parseMarketCloseData, changeInitialDate, changeFinalDate, changeInitialFund, changeTicker, addGraphDisplayOption, updateGraphDisplayOption, addAllioAllocationAsset, updateAllioAllocationProportion, generateMarketGraphData */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"parseMarketCloseData\", function() { return parseMarketCloseData; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"changeInitialDate\", function() { return changeInitialDate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"changeFinalDate\", function() { return changeFinalDate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"changeInitialFund\", function() { return changeInitialFund; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"changeTicker\", function() { return changeTicker; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addGraphDisplayOption\", function() { return addGraphDisplayOption; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"updateGraphDisplayOption\", function() { return updateGraphDisplayOption; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addAllioAllocationAsset\", function() { return addAllioAllocationAsset; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"updateAllioAllocationProportion\", function() { return updateAllioAllocationProportion; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"generateMarketGraphData\", function() { return generateMarketGraphData; });\n/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @reduxjs/toolkit */ \"./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js\");\n/* harmony import */ var decimal_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! decimal.js */ \"./node_modules/decimal.js/decimal.js\");\n/* harmony import */ var decimal_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(decimal_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var features_date_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! features/date/util */ \"./src/features/date/util.ts\");\n/* harmony import */ var utils_styles_colors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! utils/styles/colors */ \"./src/utils/styles/colors.ts\");\n/* harmony import */ var _datePriceDataEntityAdapter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./datePriceDataEntityAdapter */ \"./src/features/marketGraph/datePriceDataEntityAdapter.ts\");\n/* harmony import */ var _fetchMarketDataByTickerThunk__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./fetchMarketDataByTickerThunk */ \"./src/features/marketGraph/fetchMarketDataByTickerThunk.ts\");\n/* harmony import */ var _rawYahooFinanceChartDataEntityAdapter__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./rawYahooFinanceChartDataEntityAdapter */ \"./src/features/marketGraph/rawYahooFinanceChartDataEntityAdapter.ts\");\n/* harmony import */ var _assetDataEntityAdapter__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./assetDataEntityAdapter */ \"./src/features/marketGraph/assetDataEntityAdapter.ts\");\n/* harmony import */ var _generateCsvUrlThrunk__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./generateCsvUrlThrunk */ \"./src/features/marketGraph/generateCsvUrlThrunk.ts\");\n\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\n\n\n\n\n\n/* eslint-disable no-param-reassign */\n\nvar ALLIO_ASSET_TYPE = 'Allio';\nvar rawYahooFinanceDataInitialState = _rawYahooFinanceChartDataEntityAdapter__WEBPACK_IMPORTED_MODULE_7__[\"default\"].getInitialState({\n  loading: false,\n  errorMessage: ''\n});\nvar marketGraphSlice = Object(_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__[\"createSlice\"])({\n  name: 'marketGraph',\n  initialState: {\n    rawYahooFinanceData: rawYahooFinanceDataInitialState,\n    parsedMarketCloseData: _assetDataEntityAdapter__WEBPACK_IMPORTED_MODULE_8__[\"default\"].getInitialState(),\n    initialFund: 100,\n    initialDate: '2010-01-01',\n    finalDate: '2020-12-01',\n    ticker: '',\n    graphDisplayOptions: _assetDataEntityAdapter__WEBPACK_IMPORTED_MODULE_8__[\"default\"].addOne(_assetDataEntityAdapter__WEBPACK_IMPORTED_MODULE_8__[\"default\"].getInitialState(), {\n      assetType: ALLIO_ASSET_TYPE,\n      data: {\n        show: false,\n        color: 'navy',\n        editColor: false\n      }\n    }),\n    allioAllocation: _assetDataEntityAdapter__WEBPACK_IMPORTED_MODULE_8__[\"default\"].getInitialState(),\n    marketGraphData: _datePriceDataEntityAdapter__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getInitialState({\n      csvUrl: '',\n      csvColumnsOption: [],\n      csvData: []\n    })\n  },\n  reducers: {\n    parseMarketCloseData: function parseMarketCloseData(state, action) {\n      var chartData = action.payload;\n      var ticker = chartData.meta.symbol;\n      var timestamp = chartData.timestamp,\n          indicators = chartData.indicators;\n\n      if (!timestamp) {\n        return;\n      }\n\n      var datePriceData = timestamp.reduce(function (data, ts, ind) {\n        if (ind >= timestamp.length - 1) {\n          return data;\n        }\n\n        var date = Object(features_date_util__WEBPACK_IMPORTED_MODULE_3__[\"timestampToDate\"])(ts);\n        var dateString = Object(features_date_util__WEBPACK_IMPORTED_MODULE_3__[\"approximateUTCDateString\"])(date);\n        var price = indicators.quote[0].close[ind] && new decimal_js__WEBPACK_IMPORTED_MODULE_2__[\"Decimal\"](indicators.quote[0].close[ind]).toString();\n        return _datePriceDataEntityAdapter__WEBPACK_IMPORTED_MODULE_5__[\"default\"].upsertOne(data, {\n          assetType: ticker,\n          id: dateString,\n          date: dateString,\n          price: price\n        });\n      }, _datePriceDataEntityAdapter__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getInitialState());\n      _assetDataEntityAdapter__WEBPACK_IMPORTED_MODULE_8__[\"default\"].upsertOne(state.parsedMarketCloseData, {\n        assetType: ticker,\n        data: datePriceData\n      });\n    },\n    changeTicker: function changeTicker(state, action) {\n      state.ticker = action.payload;\n    },\n    changeInitialFund: function changeInitialFund(state, action) {\n      state.initialFund = action.payload;\n    },\n    changeInitialDate: function changeInitialDate(state, action) {\n      state.initialDate = action.payload;\n    },\n    changeFinalDate: function changeFinalDate(state, action) {\n      state.finalDate = action.payload;\n    },\n    addGraphDisplayOption: function addGraphDisplayOption(state, action) {\n      _assetDataEntityAdapter__WEBPACK_IMPORTED_MODULE_8__[\"default\"].upsertOne(state.graphDisplayOptions, {\n        assetType: action.payload,\n        data: {\n          show: true,\n          color: utils_styles_colors__WEBPACK_IMPORTED_MODULE_4__[\"presetColors\"][Math.min(state.parsedMarketCloseData.ids.length, utils_styles_colors__WEBPACK_IMPORTED_MODULE_4__[\"presetColors\"].length - 1)],\n          editColor: false\n        }\n      });\n    },\n    updateGraphDisplayOption: function updateGraphDisplayOption(state, action) {\n      _assetDataEntityAdapter__WEBPACK_IMPORTED_MODULE_8__[\"default\"].updateOne(state.graphDisplayOptions, {\n        id: action.payload.assetType,\n        changes: {\n          data: {\n            show: action.payload.show,\n            color: action.payload.color\n          }\n        }\n      });\n    },\n    toggleEditColor: function toggleEditColor(state, action) {\n      _assetDataEntityAdapter__WEBPACK_IMPORTED_MODULE_8__[\"default\"].updateOne(state.graphDisplayOptions, {\n        id: action.payload,\n        changes: {\n          data: {\n            editColor: !state.graphDisplayOptions.entities[action.payload].data.editColor\n          }\n        }\n      });\n    },\n    addAllioAllocationAsset: function addAllioAllocationAsset(state, action) {\n      _assetDataEntityAdapter__WEBPACK_IMPORTED_MODULE_8__[\"default\"].upsertOne(state.allioAllocation, {\n        assetType: action.payload,\n        data: {\n          numerator: '0',\n          denominator: '1',\n          proportion: '0'\n        }\n      });\n      state.allioAllocation.ids.forEach(function (assetType) {\n        var totalNumber = state.allioAllocation.ids.length;\n        _assetDataEntityAdapter__WEBPACK_IMPORTED_MODULE_8__[\"default\"].updateOne(state.allioAllocation, {\n          id: assetType,\n          changes: {\n            data: {\n              numerator: '1',\n              denominator: totalNumber.toString(),\n              proportion: new decimal_js__WEBPACK_IMPORTED_MODULE_2__[\"Decimal\"](1).dividedBy(totalNumber).toString()\n            }\n          }\n        });\n      });\n    },\n    updateAllioAllocationProportion: function updateAllioAllocationProportion(state, action) {\n      var numerator = action.payload.numerator || '0';\n      var denominator = action.payload.denominator || '1';\n      _assetDataEntityAdapter__WEBPACK_IMPORTED_MODULE_8__[\"default\"].updateOne(state.allioAllocation, {\n        id: action.payload.assetType,\n        changes: {\n          data: {\n            numerator: numerator,\n            denominator: denominator,\n            proportion: new decimal_js__WEBPACK_IMPORTED_MODULE_2__[\"Decimal\"](numerator).dividedBy(denominator).toString()\n          }\n        }\n      });\n    },\n    generateMarketGraphData: function generateMarketGraphData(state) {\n      var marketGraphData = _datePriceDataEntityAdapter__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getInitialState({\n        csvUrl: ''\n      });\n      var intermediateData = {};\n      var ratio = {};\n      var initialDate = Date.parse(state.initialDate);\n      var finalDate = Date.parse(state.finalDate);\n      state.allioAllocation.ids.forEach(function (assetType) {\n        state.parsedMarketCloseData.entities[assetType].data.ids.forEach(function (dateId) {\n          var parsedAssetDatum = state.parsedMarketCloseData.entities[assetType].data.entities[dateId];\n          var date = Date.parse(parsedAssetDatum.date);\n\n          if (date < initialDate || date > finalDate) {\n            return;\n          }\n\n          if (!parsedAssetDatum.price) {\n            return;\n          }\n\n          if (!ratio[assetType]) {\n            ratio[assetType] = new decimal_js__WEBPACK_IMPORTED_MODULE_2__[\"Decimal\"](state.initialFund).dividedBy(parsedAssetDatum.price);\n          }\n\n          var price = new decimal_js__WEBPACK_IMPORTED_MODULE_2__[\"Decimal\"](parsedAssetDatum.price).times(ratio[assetType]);\n          intermediateData[parsedAssetDatum.date] = _objectSpread(_objectSpread({}, intermediateData[parsedAssetDatum.date]), {}, Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, assetType, price));\n\n          if (!state.graphDisplayOptions.entities[assetType].data.show) {\n            return;\n          }\n\n          marketGraphData = _datePriceDataEntityAdapter__WEBPACK_IMPORTED_MODULE_5__[\"default\"].addOne(marketGraphData, {\n            assetType: assetType.toString(),\n            date: parsedAssetDatum.date,\n            id: \"\".concat(assetType, \"-\").concat(parsedAssetDatum.id),\n            price: price.toNumber()\n          });\n        });\n      });\n      var csvData = [];\n      Object.keys(intermediateData).forEach(function (dateString) {\n        var datum = {\n          date: dateString\n        };\n        var totalPrice = new decimal_js__WEBPACK_IMPORTED_MODULE_2__[\"Decimal\"](0);\n        Object.keys(intermediateData[dateString]).forEach(function (assetType) {\n          var price = intermediateData[dateString][assetType];\n          var proportion = state.allioAllocation.entities[assetType].data.proportion;\n          datum[assetType] = price.toFixed(2);\n          totalPrice = totalPrice.plus(price.times(proportion));\n        });\n\n        if (state.graphDisplayOptions.entities[ALLIO_ASSET_TYPE].data.show) {\n          marketGraphData = _datePriceDataEntityAdapter__WEBPACK_IMPORTED_MODULE_5__[\"default\"].addOne(marketGraphData, {\n            assetType: ALLIO_ASSET_TYPE,\n            date: dateString,\n            id: \"\".concat(ALLIO_ASSET_TYPE, \"-\").concat(dateString),\n            price: totalPrice.toNumber()\n          });\n          datum[ALLIO_ASSET_TYPE] = totalPrice.toFixed(2);\n        }\n\n        csvData.push(datum);\n      });\n      var csvColumnsOption = state.graphDisplayOptions.ids.filter(function (id) {\n        return state.graphDisplayOptions.entities[id].data.show;\n      }).map(function (id) {\n        return {\n          key: \"\".concat(id),\n          header: \"\".concat(id)\n        };\n      });\n      csvColumnsOption.unshift({\n        key: 'date',\n        header: 'date'\n      });\n      state.marketGraphData = _objectSpread(_objectSpread({}, marketGraphData), {}, {\n        csvColumnsOption: csvColumnsOption,\n        csvData: csvData,\n        csvUrl: ''\n      });\n    }\n  },\n  extraReducers: function extraReducers(builder) {\n    builder.addCase(_fetchMarketDataByTickerThunk__WEBPACK_IMPORTED_MODULE_6__[\"default\"].fulfilled, function (state, action) {\n      state.rawYahooFinanceData.loading = false;\n      state.rawYahooFinanceData.errorMessage = '';\n      _rawYahooFinanceChartDataEntityAdapter__WEBPACK_IMPORTED_MODULE_7__[\"default\"].upsertOne(state.rawYahooFinanceData, action.payload[0]);\n    });\n    builder.addCase(_fetchMarketDataByTickerThunk__WEBPACK_IMPORTED_MODULE_6__[\"default\"].pending, function (state) {\n      state.rawYahooFinanceData.loading = true;\n      state.rawYahooFinanceData.errorMessage = '';\n    });\n    builder.addCase(_fetchMarketDataByTickerThunk__WEBPACK_IMPORTED_MODULE_6__[\"default\"].rejected, function (state, action) {\n      console.error(action.error);\n      state.rawYahooFinanceData.errorMessage = action.error.message;\n      state.rawYahooFinanceData.loading = false;\n    });\n    builder.addCase(_generateCsvUrlThrunk__WEBPACK_IMPORTED_MODULE_9__[\"default\"].fulfilled, function (state, action) {\n      state.marketGraphData.csvUrl = action.payload;\n    });\n  }\n});\n/* harmony default export */ __webpack_exports__[\"default\"] = (marketGraphSlice.reducer);\nvar _marketGraphSlice$act = marketGraphSlice.actions,\n    parseMarketCloseData = _marketGraphSlice$act.parseMarketCloseData,\n    changeInitialDate = _marketGraphSlice$act.changeInitialDate,\n    changeFinalDate = _marketGraphSlice$act.changeFinalDate,\n    changeInitialFund = _marketGraphSlice$act.changeInitialFund,\n    changeTicker = _marketGraphSlice$act.changeTicker,\n    addGraphDisplayOption = _marketGraphSlice$act.addGraphDisplayOption,\n    updateGraphDisplayOption = _marketGraphSlice$act.updateGraphDisplayOption,\n    addAllioAllocationAsset = _marketGraphSlice$act.addAllioAllocationAsset,\n    updateAllioAllocationProportion = _marketGraphSlice$act.updateAllioAllocationProportion,\n    generateMarketGraphData = _marketGraphSlice$act.generateMarketGraphData;\n\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/features/marketGraph/marketGraphSlice.ts\n");

/***/ })

})